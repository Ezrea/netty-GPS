/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.udian.communicationprotocol.szstandard.thriftservice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-07")
public class GpsBasicData implements org.apache.thrift.TBase<GpsBasicData, GpsBasicData._Fields>, java.io.Serializable, Cloneable, Comparable<GpsBasicData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GpsBasicData");

  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INDUSTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("industryCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lineId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARK_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("parkOrder", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parkId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STOP_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("stopOrder", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stopId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField GPS_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("gpsTimestamp", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SENSOR_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField GPS_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("gpsSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ANGLE_FIELD_DESC = new org.apache.thrift.protocol.TField("angle", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField MILEAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("mileage", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField IS_GPS_VAILD_FIELD_DESC = new org.apache.thrift.protocol.TField("isGpsVaild", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField IS_IN_PARK_FIELD_DESC = new org.apache.thrift.protocol.TField("isInPark", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField IS_IN_START_END_FIELD_DESC = new org.apache.thrift.protocol.TField("isInStartEnd", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField IS_IN_LINE_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("isInLineUp", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField IS_DOOR_OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("isDoorOpen", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField IS_ARRIVE_STOP_FIELD_DESC = new org.apache.thrift.protocol.TField("isArriveStop", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField IS_OPERATING_FIELD_DESC = new org.apache.thrift.protocol.TField("isOperating", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField IS_IN_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isInLine", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField IS_DISK_GOOD_FIELD_DESC = new org.apache.thrift.protocol.TField("isDiskGood", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField IS_SDGOOD_FIELD_DESC = new org.apache.thrift.protocol.TField("isSDGood", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField IS_IN_NORMAL_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("isInNormalMode", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField IS_OVER_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("isOverSpeed", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField IS_LINK_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("isLinkDown", org.apache.thrift.protocol.TType.BOOL, (short)29);
  private static final org.apache.thrift.protocol.TField OPERATING_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("operatingDetail", org.apache.thrift.protocol.TType.I32, (short)30);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GpsBasicDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GpsBasicDataTupleSchemeFactory();

  public java.lang.String cityCode; // required
  public java.lang.String industryCode; // required
  public java.lang.String orgCode; // required
  public java.lang.String busId; // required
  public java.lang.String lineId; // required
  public java.lang.String parkOrder; // required
  public java.lang.String parkId; // required
  public java.lang.String stopOrder; // required
  public java.lang.String stopId; // required
  public double lng; // required
  public double lat; // required
  public java.lang.String gpsTimestamp; // required
  public double sensorSpeed; // required
  public double gpsSpeed; // required
  public double angle; // required
  public double mileage; // required
  public boolean isGpsVaild; // required
  public boolean isInPark; // required
  public boolean isInStartEnd; // required
  public boolean isInLineUp; // required
  public boolean isDoorOpen; // required
  public boolean isArriveStop; // required
  public boolean isOperating; // required
  public boolean isInLine; // required
  public boolean isDiskGood; // required
  public boolean isSDGood; // required
  public boolean isInNormalMode; // required
  public boolean isOverSpeed; // required
  public boolean isLinkDown; // required
  /**
   * 
   * @see OperatingDetailType
   */
  public OperatingDetailType operatingDetail; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CITY_CODE((short)1, "cityCode"),
    INDUSTRY_CODE((short)2, "industryCode"),
    ORG_CODE((short)3, "orgCode"),
    BUS_ID((short)4, "busId"),
    LINE_ID((short)5, "lineId"),
    PARK_ORDER((short)6, "parkOrder"),
    PARK_ID((short)7, "parkId"),
    STOP_ORDER((short)8, "stopOrder"),
    STOP_ID((short)9, "stopId"),
    LNG((short)10, "lng"),
    LAT((short)11, "lat"),
    GPS_TIMESTAMP((short)12, "gpsTimestamp"),
    SENSOR_SPEED((short)13, "sensorSpeed"),
    GPS_SPEED((short)14, "gpsSpeed"),
    ANGLE((short)15, "angle"),
    MILEAGE((short)16, "mileage"),
    IS_GPS_VAILD((short)17, "isGpsVaild"),
    IS_IN_PARK((short)18, "isInPark"),
    IS_IN_START_END((short)19, "isInStartEnd"),
    IS_IN_LINE_UP((short)20, "isInLineUp"),
    IS_DOOR_OPEN((short)21, "isDoorOpen"),
    IS_ARRIVE_STOP((short)22, "isArriveStop"),
    IS_OPERATING((short)23, "isOperating"),
    IS_IN_LINE((short)24, "isInLine"),
    IS_DISK_GOOD((short)25, "isDiskGood"),
    IS_SDGOOD((short)26, "isSDGood"),
    IS_IN_NORMAL_MODE((short)27, "isInNormalMode"),
    IS_OVER_SPEED((short)28, "isOverSpeed"),
    IS_LINK_DOWN((short)29, "isLinkDown"),
    /**
     * 
     * @see OperatingDetailType
     */
    OPERATING_DETAIL((short)30, "operatingDetail");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CITY_CODE
          return CITY_CODE;
        case 2: // INDUSTRY_CODE
          return INDUSTRY_CODE;
        case 3: // ORG_CODE
          return ORG_CODE;
        case 4: // BUS_ID
          return BUS_ID;
        case 5: // LINE_ID
          return LINE_ID;
        case 6: // PARK_ORDER
          return PARK_ORDER;
        case 7: // PARK_ID
          return PARK_ID;
        case 8: // STOP_ORDER
          return STOP_ORDER;
        case 9: // STOP_ID
          return STOP_ID;
        case 10: // LNG
          return LNG;
        case 11: // LAT
          return LAT;
        case 12: // GPS_TIMESTAMP
          return GPS_TIMESTAMP;
        case 13: // SENSOR_SPEED
          return SENSOR_SPEED;
        case 14: // GPS_SPEED
          return GPS_SPEED;
        case 15: // ANGLE
          return ANGLE;
        case 16: // MILEAGE
          return MILEAGE;
        case 17: // IS_GPS_VAILD
          return IS_GPS_VAILD;
        case 18: // IS_IN_PARK
          return IS_IN_PARK;
        case 19: // IS_IN_START_END
          return IS_IN_START_END;
        case 20: // IS_IN_LINE_UP
          return IS_IN_LINE_UP;
        case 21: // IS_DOOR_OPEN
          return IS_DOOR_OPEN;
        case 22: // IS_ARRIVE_STOP
          return IS_ARRIVE_STOP;
        case 23: // IS_OPERATING
          return IS_OPERATING;
        case 24: // IS_IN_LINE
          return IS_IN_LINE;
        case 25: // IS_DISK_GOOD
          return IS_DISK_GOOD;
        case 26: // IS_SDGOOD
          return IS_SDGOOD;
        case 27: // IS_IN_NORMAL_MODE
          return IS_IN_NORMAL_MODE;
        case 28: // IS_OVER_SPEED
          return IS_OVER_SPEED;
        case 29: // IS_LINK_DOWN
          return IS_LINK_DOWN;
        case 30: // OPERATING_DETAIL
          return OPERATING_DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LNG_ISSET_ID = 0;
  private static final int __LAT_ISSET_ID = 1;
  private static final int __SENSORSPEED_ISSET_ID = 2;
  private static final int __GPSSPEED_ISSET_ID = 3;
  private static final int __ANGLE_ISSET_ID = 4;
  private static final int __MILEAGE_ISSET_ID = 5;
  private static final int __ISGPSVAILD_ISSET_ID = 6;
  private static final int __ISINPARK_ISSET_ID = 7;
  private static final int __ISINSTARTEND_ISSET_ID = 8;
  private static final int __ISINLINEUP_ISSET_ID = 9;
  private static final int __ISDOOROPEN_ISSET_ID = 10;
  private static final int __ISARRIVESTOP_ISSET_ID = 11;
  private static final int __ISOPERATING_ISSET_ID = 12;
  private static final int __ISINLINE_ISSET_ID = 13;
  private static final int __ISDISKGOOD_ISSET_ID = 14;
  private static final int __ISSDGOOD_ISSET_ID = 15;
  private static final int __ISINNORMALMODE_ISSET_ID = 16;
  private static final int __ISOVERSPEED_ISSET_ID = 17;
  private static final int __ISLINKDOWN_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDUSTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("industryCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_ID, new org.apache.thrift.meta_data.FieldMetaData("lineId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARK_ORDER, new org.apache.thrift.meta_data.FieldMetaData("parkOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARK_ID, new org.apache.thrift.meta_data.FieldMetaData("parkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_ORDER, new org.apache.thrift.meta_data.FieldMetaData("stopOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_ID, new org.apache.thrift.meta_data.FieldMetaData("stopId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GPS_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("gpsTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSOR_SPEED, new org.apache.thrift.meta_data.FieldMetaData("sensorSpeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GPS_SPEED, new org.apache.thrift.meta_data.FieldMetaData("gpsSpeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANGLE, new org.apache.thrift.meta_data.FieldMetaData("angle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MILEAGE, new org.apache.thrift.meta_data.FieldMetaData("mileage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_GPS_VAILD, new org.apache.thrift.meta_data.FieldMetaData("isGpsVaild", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IN_PARK, new org.apache.thrift.meta_data.FieldMetaData("isInPark", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IN_START_END, new org.apache.thrift.meta_data.FieldMetaData("isInStartEnd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IN_LINE_UP, new org.apache.thrift.meta_data.FieldMetaData("isInLineUp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_DOOR_OPEN, new org.apache.thrift.meta_data.FieldMetaData("isDoorOpen", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ARRIVE_STOP, new org.apache.thrift.meta_data.FieldMetaData("isArriveStop", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_OPERATING, new org.apache.thrift.meta_data.FieldMetaData("isOperating", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IN_LINE, new org.apache.thrift.meta_data.FieldMetaData("isInLine", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_DISK_GOOD, new org.apache.thrift.meta_data.FieldMetaData("isDiskGood", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SDGOOD, new org.apache.thrift.meta_data.FieldMetaData("isSDGood", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IN_NORMAL_MODE, new org.apache.thrift.meta_data.FieldMetaData("isInNormalMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_OVER_SPEED, new org.apache.thrift.meta_data.FieldMetaData("isOverSpeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_LINK_DOWN, new org.apache.thrift.meta_data.FieldMetaData("isLinkDown", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPERATING_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("operatingDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OperatingDetailType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GpsBasicData.class, metaDataMap);
  }

  public GpsBasicData() {
  }

  public GpsBasicData(
    java.lang.String cityCode,
    java.lang.String industryCode,
    java.lang.String orgCode,
    java.lang.String busId,
    java.lang.String lineId,
    java.lang.String parkOrder,
    java.lang.String parkId,
    java.lang.String stopOrder,
    java.lang.String stopId,
    double lng,
    double lat,
    java.lang.String gpsTimestamp,
    double sensorSpeed,
    double gpsSpeed,
    double angle,
    double mileage,
    boolean isGpsVaild,
    boolean isInPark,
    boolean isInStartEnd,
    boolean isInLineUp,
    boolean isDoorOpen,
    boolean isArriveStop,
    boolean isOperating,
    boolean isInLine,
    boolean isDiskGood,
    boolean isSDGood,
    boolean isInNormalMode,
    boolean isOverSpeed,
    boolean isLinkDown,
    OperatingDetailType operatingDetail)
  {
    this();
    this.cityCode = cityCode;
    this.industryCode = industryCode;
    this.orgCode = orgCode;
    this.busId = busId;
    this.lineId = lineId;
    this.parkOrder = parkOrder;
    this.parkId = parkId;
    this.stopOrder = stopOrder;
    this.stopId = stopId;
    this.lng = lng;
    setLngIsSet(true);
    this.lat = lat;
    setLatIsSet(true);
    this.gpsTimestamp = gpsTimestamp;
    this.sensorSpeed = sensorSpeed;
    setSensorSpeedIsSet(true);
    this.gpsSpeed = gpsSpeed;
    setGpsSpeedIsSet(true);
    this.angle = angle;
    setAngleIsSet(true);
    this.mileage = mileage;
    setMileageIsSet(true);
    this.isGpsVaild = isGpsVaild;
    setIsGpsVaildIsSet(true);
    this.isInPark = isInPark;
    setIsInParkIsSet(true);
    this.isInStartEnd = isInStartEnd;
    setIsInStartEndIsSet(true);
    this.isInLineUp = isInLineUp;
    setIsInLineUpIsSet(true);
    this.isDoorOpen = isDoorOpen;
    setIsDoorOpenIsSet(true);
    this.isArriveStop = isArriveStop;
    setIsArriveStopIsSet(true);
    this.isOperating = isOperating;
    setIsOperatingIsSet(true);
    this.isInLine = isInLine;
    setIsInLineIsSet(true);
    this.isDiskGood = isDiskGood;
    setIsDiskGoodIsSet(true);
    this.isSDGood = isSDGood;
    setIsSDGoodIsSet(true);
    this.isInNormalMode = isInNormalMode;
    setIsInNormalModeIsSet(true);
    this.isOverSpeed = isOverSpeed;
    setIsOverSpeedIsSet(true);
    this.isLinkDown = isLinkDown;
    setIsLinkDownIsSet(true);
    this.operatingDetail = operatingDetail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GpsBasicData(GpsBasicData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetIndustryCode()) {
      this.industryCode = other.industryCode;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetBusId()) {
      this.busId = other.busId;
    }
    if (other.isSetLineId()) {
      this.lineId = other.lineId;
    }
    if (other.isSetParkOrder()) {
      this.parkOrder = other.parkOrder;
    }
    if (other.isSetParkId()) {
      this.parkId = other.parkId;
    }
    if (other.isSetStopOrder()) {
      this.stopOrder = other.stopOrder;
    }
    if (other.isSetStopId()) {
      this.stopId = other.stopId;
    }
    this.lng = other.lng;
    this.lat = other.lat;
    if (other.isSetGpsTimestamp()) {
      this.gpsTimestamp = other.gpsTimestamp;
    }
    this.sensorSpeed = other.sensorSpeed;
    this.gpsSpeed = other.gpsSpeed;
    this.angle = other.angle;
    this.mileage = other.mileage;
    this.isGpsVaild = other.isGpsVaild;
    this.isInPark = other.isInPark;
    this.isInStartEnd = other.isInStartEnd;
    this.isInLineUp = other.isInLineUp;
    this.isDoorOpen = other.isDoorOpen;
    this.isArriveStop = other.isArriveStop;
    this.isOperating = other.isOperating;
    this.isInLine = other.isInLine;
    this.isDiskGood = other.isDiskGood;
    this.isSDGood = other.isSDGood;
    this.isInNormalMode = other.isInNormalMode;
    this.isOverSpeed = other.isOverSpeed;
    this.isLinkDown = other.isLinkDown;
    if (other.isSetOperatingDetail()) {
      this.operatingDetail = other.operatingDetail;
    }
  }

  public GpsBasicData deepCopy() {
    return new GpsBasicData(this);
  }

  @Override
  public void clear() {
    this.cityCode = null;
    this.industryCode = null;
    this.orgCode = null;
    this.busId = null;
    this.lineId = null;
    this.parkOrder = null;
    this.parkId = null;
    this.stopOrder = null;
    this.stopId = null;
    setLngIsSet(false);
    this.lng = 0.0;
    setLatIsSet(false);
    this.lat = 0.0;
    this.gpsTimestamp = null;
    setSensorSpeedIsSet(false);
    this.sensorSpeed = 0.0;
    setGpsSpeedIsSet(false);
    this.gpsSpeed = 0.0;
    setAngleIsSet(false);
    this.angle = 0.0;
    setMileageIsSet(false);
    this.mileage = 0.0;
    setIsGpsVaildIsSet(false);
    this.isGpsVaild = false;
    setIsInParkIsSet(false);
    this.isInPark = false;
    setIsInStartEndIsSet(false);
    this.isInStartEnd = false;
    setIsInLineUpIsSet(false);
    this.isInLineUp = false;
    setIsDoorOpenIsSet(false);
    this.isDoorOpen = false;
    setIsArriveStopIsSet(false);
    this.isArriveStop = false;
    setIsOperatingIsSet(false);
    this.isOperating = false;
    setIsInLineIsSet(false);
    this.isInLine = false;
    setIsDiskGoodIsSet(false);
    this.isDiskGood = false;
    setIsSDGoodIsSet(false);
    this.isSDGood = false;
    setIsInNormalModeIsSet(false);
    this.isInNormalMode = false;
    setIsOverSpeedIsSet(false);
    this.isOverSpeed = false;
    setIsLinkDownIsSet(false);
    this.isLinkDown = false;
    this.operatingDetail = null;
  }

  public java.lang.String getCityCode() {
    return this.cityCode;
  }

  public GpsBasicData setCityCode(java.lang.String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public java.lang.String getIndustryCode() {
    return this.industryCode;
  }

  public GpsBasicData setIndustryCode(java.lang.String industryCode) {
    this.industryCode = industryCode;
    return this;
  }

  public void unsetIndustryCode() {
    this.industryCode = null;
  }

  /** Returns true if field industryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustryCode() {
    return this.industryCode != null;
  }

  public void setIndustryCodeIsSet(boolean value) {
    if (!value) {
      this.industryCode = null;
    }
  }

  public java.lang.String getOrgCode() {
    return this.orgCode;
  }

  public GpsBasicData setOrgCode(java.lang.String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public java.lang.String getBusId() {
    return this.busId;
  }

  public GpsBasicData setBusId(java.lang.String busId) {
    this.busId = busId;
    return this;
  }

  public void unsetBusId() {
    this.busId = null;
  }

  /** Returns true if field busId is set (has been assigned a value) and false otherwise */
  public boolean isSetBusId() {
    return this.busId != null;
  }

  public void setBusIdIsSet(boolean value) {
    if (!value) {
      this.busId = null;
    }
  }

  public java.lang.String getLineId() {
    return this.lineId;
  }

  public GpsBasicData setLineId(java.lang.String lineId) {
    this.lineId = lineId;
    return this;
  }

  public void unsetLineId() {
    this.lineId = null;
  }

  /** Returns true if field lineId is set (has been assigned a value) and false otherwise */
  public boolean isSetLineId() {
    return this.lineId != null;
  }

  public void setLineIdIsSet(boolean value) {
    if (!value) {
      this.lineId = null;
    }
  }

  public java.lang.String getParkOrder() {
    return this.parkOrder;
  }

  public GpsBasicData setParkOrder(java.lang.String parkOrder) {
    this.parkOrder = parkOrder;
    return this;
  }

  public void unsetParkOrder() {
    this.parkOrder = null;
  }

  /** Returns true if field parkOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetParkOrder() {
    return this.parkOrder != null;
  }

  public void setParkOrderIsSet(boolean value) {
    if (!value) {
      this.parkOrder = null;
    }
  }

  public java.lang.String getParkId() {
    return this.parkId;
  }

  public GpsBasicData setParkId(java.lang.String parkId) {
    this.parkId = parkId;
    return this;
  }

  public void unsetParkId() {
    this.parkId = null;
  }

  /** Returns true if field parkId is set (has been assigned a value) and false otherwise */
  public boolean isSetParkId() {
    return this.parkId != null;
  }

  public void setParkIdIsSet(boolean value) {
    if (!value) {
      this.parkId = null;
    }
  }

  public java.lang.String getStopOrder() {
    return this.stopOrder;
  }

  public GpsBasicData setStopOrder(java.lang.String stopOrder) {
    this.stopOrder = stopOrder;
    return this;
  }

  public void unsetStopOrder() {
    this.stopOrder = null;
  }

  /** Returns true if field stopOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetStopOrder() {
    return this.stopOrder != null;
  }

  public void setStopOrderIsSet(boolean value) {
    if (!value) {
      this.stopOrder = null;
    }
  }

  public java.lang.String getStopId() {
    return this.stopId;
  }

  public GpsBasicData setStopId(java.lang.String stopId) {
    this.stopId = stopId;
    return this;
  }

  public void unsetStopId() {
    this.stopId = null;
  }

  /** Returns true if field stopId is set (has been assigned a value) and false otherwise */
  public boolean isSetStopId() {
    return this.stopId != null;
  }

  public void setStopIdIsSet(boolean value) {
    if (!value) {
      this.stopId = null;
    }
  }

  public double getLng() {
    return this.lng;
  }

  public GpsBasicData setLng(double lng) {
    this.lng = lng;
    setLngIsSet(true);
    return this;
  }

  public void unsetLng() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LNG_ISSET_ID);
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LNG_ISSET_ID);
  }

  public void setLngIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LNG_ISSET_ID, value);
  }

  public double getLat() {
    return this.lat;
  }

  public GpsBasicData setLat(double lat) {
    this.lat = lat;
    setLatIsSet(true);
    return this;
  }

  public void unsetLat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  public void setLatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
  }

  public java.lang.String getGpsTimestamp() {
    return this.gpsTimestamp;
  }

  public GpsBasicData setGpsTimestamp(java.lang.String gpsTimestamp) {
    this.gpsTimestamp = gpsTimestamp;
    return this;
  }

  public void unsetGpsTimestamp() {
    this.gpsTimestamp = null;
  }

  /** Returns true if field gpsTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetGpsTimestamp() {
    return this.gpsTimestamp != null;
  }

  public void setGpsTimestampIsSet(boolean value) {
    if (!value) {
      this.gpsTimestamp = null;
    }
  }

  public double getSensorSpeed() {
    return this.sensorSpeed;
  }

  public GpsBasicData setSensorSpeed(double sensorSpeed) {
    this.sensorSpeed = sensorSpeed;
    setSensorSpeedIsSet(true);
    return this;
  }

  public void unsetSensorSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENSORSPEED_ISSET_ID);
  }

  /** Returns true if field sensorSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENSORSPEED_ISSET_ID);
  }

  public void setSensorSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENSORSPEED_ISSET_ID, value);
  }

  public double getGpsSpeed() {
    return this.gpsSpeed;
  }

  public GpsBasicData setGpsSpeed(double gpsSpeed) {
    this.gpsSpeed = gpsSpeed;
    setGpsSpeedIsSet(true);
    return this;
  }

  public void unsetGpsSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GPSSPEED_ISSET_ID);
  }

  /** Returns true if field gpsSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetGpsSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GPSSPEED_ISSET_ID);
  }

  public void setGpsSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GPSSPEED_ISSET_ID, value);
  }

  public double getAngle() {
    return this.angle;
  }

  public GpsBasicData setAngle(double angle) {
    this.angle = angle;
    setAngleIsSet(true);
    return this;
  }

  public void unsetAngle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANGLE_ISSET_ID);
  }

  /** Returns true if field angle is set (has been assigned a value) and false otherwise */
  public boolean isSetAngle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANGLE_ISSET_ID);
  }

  public void setAngleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANGLE_ISSET_ID, value);
  }

  public double getMileage() {
    return this.mileage;
  }

  public GpsBasicData setMileage(double mileage) {
    this.mileage = mileage;
    setMileageIsSet(true);
    return this;
  }

  public void unsetMileage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MILEAGE_ISSET_ID);
  }

  /** Returns true if field mileage is set (has been assigned a value) and false otherwise */
  public boolean isSetMileage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MILEAGE_ISSET_ID);
  }

  public void setMileageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MILEAGE_ISSET_ID, value);
  }

  public boolean isIsGpsVaild() {
    return this.isGpsVaild;
  }

  public GpsBasicData setIsGpsVaild(boolean isGpsVaild) {
    this.isGpsVaild = isGpsVaild;
    setIsGpsVaildIsSet(true);
    return this;
  }

  public void unsetIsGpsVaild() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGPSVAILD_ISSET_ID);
  }

  /** Returns true if field isGpsVaild is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGpsVaild() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGPSVAILD_ISSET_ID);
  }

  public void setIsGpsVaildIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGPSVAILD_ISSET_ID, value);
  }

  public boolean isIsInPark() {
    return this.isInPark;
  }

  public GpsBasicData setIsInPark(boolean isInPark) {
    this.isInPark = isInPark;
    setIsInParkIsSet(true);
    return this;
  }

  public void unsetIsInPark() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINPARK_ISSET_ID);
  }

  /** Returns true if field isInPark is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInPark() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINPARK_ISSET_ID);
  }

  public void setIsInParkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINPARK_ISSET_ID, value);
  }

  public boolean isIsInStartEnd() {
    return this.isInStartEnd;
  }

  public GpsBasicData setIsInStartEnd(boolean isInStartEnd) {
    this.isInStartEnd = isInStartEnd;
    setIsInStartEndIsSet(true);
    return this;
  }

  public void unsetIsInStartEnd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINSTARTEND_ISSET_ID);
  }

  /** Returns true if field isInStartEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInStartEnd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINSTARTEND_ISSET_ID);
  }

  public void setIsInStartEndIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINSTARTEND_ISSET_ID, value);
  }

  public boolean isIsInLineUp() {
    return this.isInLineUp;
  }

  public GpsBasicData setIsInLineUp(boolean isInLineUp) {
    this.isInLineUp = isInLineUp;
    setIsInLineUpIsSet(true);
    return this;
  }

  public void unsetIsInLineUp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINLINEUP_ISSET_ID);
  }

  /** Returns true if field isInLineUp is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInLineUp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINLINEUP_ISSET_ID);
  }

  public void setIsInLineUpIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINLINEUP_ISSET_ID, value);
  }

  public boolean isIsDoorOpen() {
    return this.isDoorOpen;
  }

  public GpsBasicData setIsDoorOpen(boolean isDoorOpen) {
    this.isDoorOpen = isDoorOpen;
    setIsDoorOpenIsSet(true);
    return this;
  }

  public void unsetIsDoorOpen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDOOROPEN_ISSET_ID);
  }

  /** Returns true if field isDoorOpen is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDoorOpen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDOOROPEN_ISSET_ID);
  }

  public void setIsDoorOpenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDOOROPEN_ISSET_ID, value);
  }

  public boolean isIsArriveStop() {
    return this.isArriveStop;
  }

  public GpsBasicData setIsArriveStop(boolean isArriveStop) {
    this.isArriveStop = isArriveStop;
    setIsArriveStopIsSet(true);
    return this;
  }

  public void unsetIsArriveStop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISARRIVESTOP_ISSET_ID);
  }

  /** Returns true if field isArriveStop is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArriveStop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISARRIVESTOP_ISSET_ID);
  }

  public void setIsArriveStopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISARRIVESTOP_ISSET_ID, value);
  }

  public boolean isIsOperating() {
    return this.isOperating;
  }

  public GpsBasicData setIsOperating(boolean isOperating) {
    this.isOperating = isOperating;
    setIsOperatingIsSet(true);
    return this;
  }

  public void unsetIsOperating() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISOPERATING_ISSET_ID);
  }

  /** Returns true if field isOperating is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOperating() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISOPERATING_ISSET_ID);
  }

  public void setIsOperatingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISOPERATING_ISSET_ID, value);
  }

  public boolean isIsInLine() {
    return this.isInLine;
  }

  public GpsBasicData setIsInLine(boolean isInLine) {
    this.isInLine = isInLine;
    setIsInLineIsSet(true);
    return this;
  }

  public void unsetIsInLine() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINLINE_ISSET_ID);
  }

  /** Returns true if field isInLine is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInLine() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINLINE_ISSET_ID);
  }

  public void setIsInLineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINLINE_ISSET_ID, value);
  }

  public boolean isIsDiskGood() {
    return this.isDiskGood;
  }

  public GpsBasicData setIsDiskGood(boolean isDiskGood) {
    this.isDiskGood = isDiskGood;
    setIsDiskGoodIsSet(true);
    return this;
  }

  public void unsetIsDiskGood() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDISKGOOD_ISSET_ID);
  }

  /** Returns true if field isDiskGood is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDiskGood() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDISKGOOD_ISSET_ID);
  }

  public void setIsDiskGoodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDISKGOOD_ISSET_ID, value);
  }

  public boolean isIsSDGood() {
    return this.isSDGood;
  }

  public GpsBasicData setIsSDGood(boolean isSDGood) {
    this.isSDGood = isSDGood;
    setIsSDGoodIsSet(true);
    return this;
  }

  public void unsetIsSDGood() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSDGOOD_ISSET_ID);
  }

  /** Returns true if field isSDGood is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSDGood() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSDGOOD_ISSET_ID);
  }

  public void setIsSDGoodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSDGOOD_ISSET_ID, value);
  }

  public boolean isIsInNormalMode() {
    return this.isInNormalMode;
  }

  public GpsBasicData setIsInNormalMode(boolean isInNormalMode) {
    this.isInNormalMode = isInNormalMode;
    setIsInNormalModeIsSet(true);
    return this;
  }

  public void unsetIsInNormalMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINNORMALMODE_ISSET_ID);
  }

  /** Returns true if field isInNormalMode is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInNormalMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINNORMALMODE_ISSET_ID);
  }

  public void setIsInNormalModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINNORMALMODE_ISSET_ID, value);
  }

  public boolean isIsOverSpeed() {
    return this.isOverSpeed;
  }

  public GpsBasicData setIsOverSpeed(boolean isOverSpeed) {
    this.isOverSpeed = isOverSpeed;
    setIsOverSpeedIsSet(true);
    return this;
  }

  public void unsetIsOverSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISOVERSPEED_ISSET_ID);
  }

  /** Returns true if field isOverSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOverSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISOVERSPEED_ISSET_ID);
  }

  public void setIsOverSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISOVERSPEED_ISSET_ID, value);
  }

  public boolean isIsLinkDown() {
    return this.isLinkDown;
  }

  public GpsBasicData setIsLinkDown(boolean isLinkDown) {
    this.isLinkDown = isLinkDown;
    setIsLinkDownIsSet(true);
    return this;
  }

  public void unsetIsLinkDown() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLINKDOWN_ISSET_ID);
  }

  /** Returns true if field isLinkDown is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLinkDown() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLINKDOWN_ISSET_ID);
  }

  public void setIsLinkDownIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLINKDOWN_ISSET_ID, value);
  }

  /**
   * 
   * @see OperatingDetailType
   */
  public OperatingDetailType getOperatingDetail() {
    return this.operatingDetail;
  }

  /**
   * 
   * @see OperatingDetailType
   */
  public GpsBasicData setOperatingDetail(OperatingDetailType operatingDetail) {
    this.operatingDetail = operatingDetail;
    return this;
  }

  public void unsetOperatingDetail() {
    this.operatingDetail = null;
  }

  /** Returns true if field operatingDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatingDetail() {
    return this.operatingDetail != null;
  }

  public void setOperatingDetailIsSet(boolean value) {
    if (!value) {
      this.operatingDetail = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((java.lang.String)value);
      }
      break;

    case INDUSTRY_CODE:
      if (value == null) {
        unsetIndustryCode();
      } else {
        setIndustryCode((java.lang.String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((java.lang.String)value);
      }
      break;

    case BUS_ID:
      if (value == null) {
        unsetBusId();
      } else {
        setBusId((java.lang.String)value);
      }
      break;

    case LINE_ID:
      if (value == null) {
        unsetLineId();
      } else {
        setLineId((java.lang.String)value);
      }
      break;

    case PARK_ORDER:
      if (value == null) {
        unsetParkOrder();
      } else {
        setParkOrder((java.lang.String)value);
      }
      break;

    case PARK_ID:
      if (value == null) {
        unsetParkId();
      } else {
        setParkId((java.lang.String)value);
      }
      break;

    case STOP_ORDER:
      if (value == null) {
        unsetStopOrder();
      } else {
        setStopOrder((java.lang.String)value);
      }
      break;

    case STOP_ID:
      if (value == null) {
        unsetStopId();
      } else {
        setStopId((java.lang.String)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((java.lang.Double)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((java.lang.Double)value);
      }
      break;

    case GPS_TIMESTAMP:
      if (value == null) {
        unsetGpsTimestamp();
      } else {
        setGpsTimestamp((java.lang.String)value);
      }
      break;

    case SENSOR_SPEED:
      if (value == null) {
        unsetSensorSpeed();
      } else {
        setSensorSpeed((java.lang.Double)value);
      }
      break;

    case GPS_SPEED:
      if (value == null) {
        unsetGpsSpeed();
      } else {
        setGpsSpeed((java.lang.Double)value);
      }
      break;

    case ANGLE:
      if (value == null) {
        unsetAngle();
      } else {
        setAngle((java.lang.Double)value);
      }
      break;

    case MILEAGE:
      if (value == null) {
        unsetMileage();
      } else {
        setMileage((java.lang.Double)value);
      }
      break;

    case IS_GPS_VAILD:
      if (value == null) {
        unsetIsGpsVaild();
      } else {
        setIsGpsVaild((java.lang.Boolean)value);
      }
      break;

    case IS_IN_PARK:
      if (value == null) {
        unsetIsInPark();
      } else {
        setIsInPark((java.lang.Boolean)value);
      }
      break;

    case IS_IN_START_END:
      if (value == null) {
        unsetIsInStartEnd();
      } else {
        setIsInStartEnd((java.lang.Boolean)value);
      }
      break;

    case IS_IN_LINE_UP:
      if (value == null) {
        unsetIsInLineUp();
      } else {
        setIsInLineUp((java.lang.Boolean)value);
      }
      break;

    case IS_DOOR_OPEN:
      if (value == null) {
        unsetIsDoorOpen();
      } else {
        setIsDoorOpen((java.lang.Boolean)value);
      }
      break;

    case IS_ARRIVE_STOP:
      if (value == null) {
        unsetIsArriveStop();
      } else {
        setIsArriveStop((java.lang.Boolean)value);
      }
      break;

    case IS_OPERATING:
      if (value == null) {
        unsetIsOperating();
      } else {
        setIsOperating((java.lang.Boolean)value);
      }
      break;

    case IS_IN_LINE:
      if (value == null) {
        unsetIsInLine();
      } else {
        setIsInLine((java.lang.Boolean)value);
      }
      break;

    case IS_DISK_GOOD:
      if (value == null) {
        unsetIsDiskGood();
      } else {
        setIsDiskGood((java.lang.Boolean)value);
      }
      break;

    case IS_SDGOOD:
      if (value == null) {
        unsetIsSDGood();
      } else {
        setIsSDGood((java.lang.Boolean)value);
      }
      break;

    case IS_IN_NORMAL_MODE:
      if (value == null) {
        unsetIsInNormalMode();
      } else {
        setIsInNormalMode((java.lang.Boolean)value);
      }
      break;

    case IS_OVER_SPEED:
      if (value == null) {
        unsetIsOverSpeed();
      } else {
        setIsOverSpeed((java.lang.Boolean)value);
      }
      break;

    case IS_LINK_DOWN:
      if (value == null) {
        unsetIsLinkDown();
      } else {
        setIsLinkDown((java.lang.Boolean)value);
      }
      break;

    case OPERATING_DETAIL:
      if (value == null) {
        unsetOperatingDetail();
      } else {
        setOperatingDetail((OperatingDetailType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CITY_CODE:
      return getCityCode();

    case INDUSTRY_CODE:
      return getIndustryCode();

    case ORG_CODE:
      return getOrgCode();

    case BUS_ID:
      return getBusId();

    case LINE_ID:
      return getLineId();

    case PARK_ORDER:
      return getParkOrder();

    case PARK_ID:
      return getParkId();

    case STOP_ORDER:
      return getStopOrder();

    case STOP_ID:
      return getStopId();

    case LNG:
      return getLng();

    case LAT:
      return getLat();

    case GPS_TIMESTAMP:
      return getGpsTimestamp();

    case SENSOR_SPEED:
      return getSensorSpeed();

    case GPS_SPEED:
      return getGpsSpeed();

    case ANGLE:
      return getAngle();

    case MILEAGE:
      return getMileage();

    case IS_GPS_VAILD:
      return isIsGpsVaild();

    case IS_IN_PARK:
      return isIsInPark();

    case IS_IN_START_END:
      return isIsInStartEnd();

    case IS_IN_LINE_UP:
      return isIsInLineUp();

    case IS_DOOR_OPEN:
      return isIsDoorOpen();

    case IS_ARRIVE_STOP:
      return isIsArriveStop();

    case IS_OPERATING:
      return isIsOperating();

    case IS_IN_LINE:
      return isIsInLine();

    case IS_DISK_GOOD:
      return isIsDiskGood();

    case IS_SDGOOD:
      return isIsSDGood();

    case IS_IN_NORMAL_MODE:
      return isIsInNormalMode();

    case IS_OVER_SPEED:
      return isIsOverSpeed();

    case IS_LINK_DOWN:
      return isIsLinkDown();

    case OPERATING_DETAIL:
      return getOperatingDetail();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CITY_CODE:
      return isSetCityCode();
    case INDUSTRY_CODE:
      return isSetIndustryCode();
    case ORG_CODE:
      return isSetOrgCode();
    case BUS_ID:
      return isSetBusId();
    case LINE_ID:
      return isSetLineId();
    case PARK_ORDER:
      return isSetParkOrder();
    case PARK_ID:
      return isSetParkId();
    case STOP_ORDER:
      return isSetStopOrder();
    case STOP_ID:
      return isSetStopId();
    case LNG:
      return isSetLng();
    case LAT:
      return isSetLat();
    case GPS_TIMESTAMP:
      return isSetGpsTimestamp();
    case SENSOR_SPEED:
      return isSetSensorSpeed();
    case GPS_SPEED:
      return isSetGpsSpeed();
    case ANGLE:
      return isSetAngle();
    case MILEAGE:
      return isSetMileage();
    case IS_GPS_VAILD:
      return isSetIsGpsVaild();
    case IS_IN_PARK:
      return isSetIsInPark();
    case IS_IN_START_END:
      return isSetIsInStartEnd();
    case IS_IN_LINE_UP:
      return isSetIsInLineUp();
    case IS_DOOR_OPEN:
      return isSetIsDoorOpen();
    case IS_ARRIVE_STOP:
      return isSetIsArriveStop();
    case IS_OPERATING:
      return isSetIsOperating();
    case IS_IN_LINE:
      return isSetIsInLine();
    case IS_DISK_GOOD:
      return isSetIsDiskGood();
    case IS_SDGOOD:
      return isSetIsSDGood();
    case IS_IN_NORMAL_MODE:
      return isSetIsInNormalMode();
    case IS_OVER_SPEED:
      return isSetIsOverSpeed();
    case IS_LINK_DOWN:
      return isSetIsLinkDown();
    case OPERATING_DETAIL:
      return isSetOperatingDetail();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GpsBasicData)
      return this.equals((GpsBasicData)that);
    return false;
  }

  public boolean equals(GpsBasicData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_industryCode = true && this.isSetIndustryCode();
    boolean that_present_industryCode = true && that.isSetIndustryCode();
    if (this_present_industryCode || that_present_industryCode) {
      if (!(this_present_industryCode && that_present_industryCode))
        return false;
      if (!this.industryCode.equals(that.industryCode))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_busId = true && this.isSetBusId();
    boolean that_present_busId = true && that.isSetBusId();
    if (this_present_busId || that_present_busId) {
      if (!(this_present_busId && that_present_busId))
        return false;
      if (!this.busId.equals(that.busId))
        return false;
    }

    boolean this_present_lineId = true && this.isSetLineId();
    boolean that_present_lineId = true && that.isSetLineId();
    if (this_present_lineId || that_present_lineId) {
      if (!(this_present_lineId && that_present_lineId))
        return false;
      if (!this.lineId.equals(that.lineId))
        return false;
    }

    boolean this_present_parkOrder = true && this.isSetParkOrder();
    boolean that_present_parkOrder = true && that.isSetParkOrder();
    if (this_present_parkOrder || that_present_parkOrder) {
      if (!(this_present_parkOrder && that_present_parkOrder))
        return false;
      if (!this.parkOrder.equals(that.parkOrder))
        return false;
    }

    boolean this_present_parkId = true && this.isSetParkId();
    boolean that_present_parkId = true && that.isSetParkId();
    if (this_present_parkId || that_present_parkId) {
      if (!(this_present_parkId && that_present_parkId))
        return false;
      if (!this.parkId.equals(that.parkId))
        return false;
    }

    boolean this_present_stopOrder = true && this.isSetStopOrder();
    boolean that_present_stopOrder = true && that.isSetStopOrder();
    if (this_present_stopOrder || that_present_stopOrder) {
      if (!(this_present_stopOrder && that_present_stopOrder))
        return false;
      if (!this.stopOrder.equals(that.stopOrder))
        return false;
    }

    boolean this_present_stopId = true && this.isSetStopId();
    boolean that_present_stopId = true && that.isSetStopId();
    if (this_present_stopId || that_present_stopId) {
      if (!(this_present_stopId && that_present_stopId))
        return false;
      if (!this.stopId.equals(that.stopId))
        return false;
    }

    boolean this_present_lng = true;
    boolean that_present_lng = true;
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (this.lng != that.lng)
        return false;
    }

    boolean this_present_lat = true;
    boolean that_present_lat = true;
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (this.lat != that.lat)
        return false;
    }

    boolean this_present_gpsTimestamp = true && this.isSetGpsTimestamp();
    boolean that_present_gpsTimestamp = true && that.isSetGpsTimestamp();
    if (this_present_gpsTimestamp || that_present_gpsTimestamp) {
      if (!(this_present_gpsTimestamp && that_present_gpsTimestamp))
        return false;
      if (!this.gpsTimestamp.equals(that.gpsTimestamp))
        return false;
    }

    boolean this_present_sensorSpeed = true;
    boolean that_present_sensorSpeed = true;
    if (this_present_sensorSpeed || that_present_sensorSpeed) {
      if (!(this_present_sensorSpeed && that_present_sensorSpeed))
        return false;
      if (this.sensorSpeed != that.sensorSpeed)
        return false;
    }

    boolean this_present_gpsSpeed = true;
    boolean that_present_gpsSpeed = true;
    if (this_present_gpsSpeed || that_present_gpsSpeed) {
      if (!(this_present_gpsSpeed && that_present_gpsSpeed))
        return false;
      if (this.gpsSpeed != that.gpsSpeed)
        return false;
    }

    boolean this_present_angle = true;
    boolean that_present_angle = true;
    if (this_present_angle || that_present_angle) {
      if (!(this_present_angle && that_present_angle))
        return false;
      if (this.angle != that.angle)
        return false;
    }

    boolean this_present_mileage = true;
    boolean that_present_mileage = true;
    if (this_present_mileage || that_present_mileage) {
      if (!(this_present_mileage && that_present_mileage))
        return false;
      if (this.mileage != that.mileage)
        return false;
    }

    boolean this_present_isGpsVaild = true;
    boolean that_present_isGpsVaild = true;
    if (this_present_isGpsVaild || that_present_isGpsVaild) {
      if (!(this_present_isGpsVaild && that_present_isGpsVaild))
        return false;
      if (this.isGpsVaild != that.isGpsVaild)
        return false;
    }

    boolean this_present_isInPark = true;
    boolean that_present_isInPark = true;
    if (this_present_isInPark || that_present_isInPark) {
      if (!(this_present_isInPark && that_present_isInPark))
        return false;
      if (this.isInPark != that.isInPark)
        return false;
    }

    boolean this_present_isInStartEnd = true;
    boolean that_present_isInStartEnd = true;
    if (this_present_isInStartEnd || that_present_isInStartEnd) {
      if (!(this_present_isInStartEnd && that_present_isInStartEnd))
        return false;
      if (this.isInStartEnd != that.isInStartEnd)
        return false;
    }

    boolean this_present_isInLineUp = true;
    boolean that_present_isInLineUp = true;
    if (this_present_isInLineUp || that_present_isInLineUp) {
      if (!(this_present_isInLineUp && that_present_isInLineUp))
        return false;
      if (this.isInLineUp != that.isInLineUp)
        return false;
    }

    boolean this_present_isDoorOpen = true;
    boolean that_present_isDoorOpen = true;
    if (this_present_isDoorOpen || that_present_isDoorOpen) {
      if (!(this_present_isDoorOpen && that_present_isDoorOpen))
        return false;
      if (this.isDoorOpen != that.isDoorOpen)
        return false;
    }

    boolean this_present_isArriveStop = true;
    boolean that_present_isArriveStop = true;
    if (this_present_isArriveStop || that_present_isArriveStop) {
      if (!(this_present_isArriveStop && that_present_isArriveStop))
        return false;
      if (this.isArriveStop != that.isArriveStop)
        return false;
    }

    boolean this_present_isOperating = true;
    boolean that_present_isOperating = true;
    if (this_present_isOperating || that_present_isOperating) {
      if (!(this_present_isOperating && that_present_isOperating))
        return false;
      if (this.isOperating != that.isOperating)
        return false;
    }

    boolean this_present_isInLine = true;
    boolean that_present_isInLine = true;
    if (this_present_isInLine || that_present_isInLine) {
      if (!(this_present_isInLine && that_present_isInLine))
        return false;
      if (this.isInLine != that.isInLine)
        return false;
    }

    boolean this_present_isDiskGood = true;
    boolean that_present_isDiskGood = true;
    if (this_present_isDiskGood || that_present_isDiskGood) {
      if (!(this_present_isDiskGood && that_present_isDiskGood))
        return false;
      if (this.isDiskGood != that.isDiskGood)
        return false;
    }

    boolean this_present_isSDGood = true;
    boolean that_present_isSDGood = true;
    if (this_present_isSDGood || that_present_isSDGood) {
      if (!(this_present_isSDGood && that_present_isSDGood))
        return false;
      if (this.isSDGood != that.isSDGood)
        return false;
    }

    boolean this_present_isInNormalMode = true;
    boolean that_present_isInNormalMode = true;
    if (this_present_isInNormalMode || that_present_isInNormalMode) {
      if (!(this_present_isInNormalMode && that_present_isInNormalMode))
        return false;
      if (this.isInNormalMode != that.isInNormalMode)
        return false;
    }

    boolean this_present_isOverSpeed = true;
    boolean that_present_isOverSpeed = true;
    if (this_present_isOverSpeed || that_present_isOverSpeed) {
      if (!(this_present_isOverSpeed && that_present_isOverSpeed))
        return false;
      if (this.isOverSpeed != that.isOverSpeed)
        return false;
    }

    boolean this_present_isLinkDown = true;
    boolean that_present_isLinkDown = true;
    if (this_present_isLinkDown || that_present_isLinkDown) {
      if (!(this_present_isLinkDown && that_present_isLinkDown))
        return false;
      if (this.isLinkDown != that.isLinkDown)
        return false;
    }

    boolean this_present_operatingDetail = true && this.isSetOperatingDetail();
    boolean that_present_operatingDetail = true && that.isSetOperatingDetail();
    if (this_present_operatingDetail || that_present_operatingDetail) {
      if (!(this_present_operatingDetail && that_present_operatingDetail))
        return false;
      if (!this.operatingDetail.equals(that.operatingDetail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCityCode()) ? 131071 : 524287);
    if (isSetCityCode())
      hashCode = hashCode * 8191 + cityCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndustryCode()) ? 131071 : 524287);
    if (isSetIndustryCode())
      hashCode = hashCode * 8191 + industryCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrgCode()) ? 131071 : 524287);
    if (isSetOrgCode())
      hashCode = hashCode * 8191 + orgCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
    if (isSetBusId())
      hashCode = hashCode * 8191 + busId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLineId()) ? 131071 : 524287);
    if (isSetLineId())
      hashCode = hashCode * 8191 + lineId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParkOrder()) ? 131071 : 524287);
    if (isSetParkOrder())
      hashCode = hashCode * 8191 + parkOrder.hashCode();

    hashCode = hashCode * 8191 + ((isSetParkId()) ? 131071 : 524287);
    if (isSetParkId())
      hashCode = hashCode * 8191 + parkId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStopOrder()) ? 131071 : 524287);
    if (isSetStopOrder())
      hashCode = hashCode * 8191 + stopOrder.hashCode();

    hashCode = hashCode * 8191 + ((isSetStopId()) ? 131071 : 524287);
    if (isSetStopId())
      hashCode = hashCode * 8191 + stopId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lng);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lat);

    hashCode = hashCode * 8191 + ((isSetGpsTimestamp()) ? 131071 : 524287);
    if (isSetGpsTimestamp())
      hashCode = hashCode * 8191 + gpsTimestamp.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sensorSpeed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(gpsSpeed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(angle);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mileage);

    hashCode = hashCode * 8191 + ((isGpsVaild) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isInPark) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isInStartEnd) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isInLineUp) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isDoorOpen) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isArriveStop) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isOperating) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isInLine) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isDiskGood) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSDGood) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isInNormalMode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isOverSpeed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isLinkDown) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOperatingDetail()) ? 131071 : 524287);
    if (isSetOperatingDetail())
      hashCode = hashCode * 8191 + operatingDetail.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(GpsBasicData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIndustryCode()).compareTo(other.isSetIndustryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industryCode, other.industryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLineId()).compareTo(other.isSetLineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineId, other.lineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParkOrder()).compareTo(other.isSetParkOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParkOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parkOrder, other.parkOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParkId()).compareTo(other.isSetParkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parkId, other.parkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStopOrder()).compareTo(other.isSetStopOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopOrder, other.stopOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStopId()).compareTo(other.isSetStopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopId, other.stopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLng()).compareTo(other.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, other.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGpsTimestamp()).compareTo(other.isSetGpsTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGpsTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpsTimestamp, other.gpsTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSensorSpeed()).compareTo(other.isSetSensorSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorSpeed, other.sensorSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGpsSpeed()).compareTo(other.isSetGpsSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGpsSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpsSpeed, other.gpsSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAngle()).compareTo(other.isSetAngle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAngle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.angle, other.angle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMileage()).compareTo(other.isSetMileage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMileage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mileage, other.mileage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsGpsVaild()).compareTo(other.isSetIsGpsVaild());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGpsVaild()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGpsVaild, other.isGpsVaild);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsInPark()).compareTo(other.isSetIsInPark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInPark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInPark, other.isInPark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsInStartEnd()).compareTo(other.isSetIsInStartEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInStartEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInStartEnd, other.isInStartEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsInLineUp()).compareTo(other.isSetIsInLineUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInLineUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInLineUp, other.isInLineUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsDoorOpen()).compareTo(other.isSetIsDoorOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDoorOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDoorOpen, other.isDoorOpen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsArriveStop()).compareTo(other.isSetIsArriveStop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArriveStop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArriveStop, other.isArriveStop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsOperating()).compareTo(other.isSetIsOperating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOperating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOperating, other.isOperating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsInLine()).compareTo(other.isSetIsInLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInLine, other.isInLine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsDiskGood()).compareTo(other.isSetIsDiskGood());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDiskGood()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDiskGood, other.isDiskGood);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsSDGood()).compareTo(other.isSetIsSDGood());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSDGood()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSDGood, other.isSDGood);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsInNormalMode()).compareTo(other.isSetIsInNormalMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInNormalMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInNormalMode, other.isInNormalMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsOverSpeed()).compareTo(other.isSetIsOverSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOverSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOverSpeed, other.isOverSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsLinkDown()).compareTo(other.isSetIsLinkDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLinkDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLinkDown, other.isLinkDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperatingDetail()).compareTo(other.isSetOperatingDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatingDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatingDetail, other.operatingDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GpsBasicData(");
    boolean first = true;

    sb.append("cityCode:");
    if (this.cityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("industryCode:");
    if (this.industryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.industryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busId:");
    if (this.busId == null) {
      sb.append("null");
    } else {
      sb.append(this.busId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineId:");
    if (this.lineId == null) {
      sb.append("null");
    } else {
      sb.append(this.lineId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parkOrder:");
    if (this.parkOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.parkOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parkId:");
    if (this.parkId == null) {
      sb.append("null");
    } else {
      sb.append(this.parkId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopOrder:");
    if (this.stopOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.stopOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopId:");
    if (this.stopId == null) {
      sb.append("null");
    } else {
      sb.append(this.stopId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    sb.append(this.lng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lat:");
    sb.append(this.lat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gpsTimestamp:");
    if (this.gpsTimestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.gpsTimestamp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensorSpeed:");
    sb.append(this.sensorSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gpsSpeed:");
    sb.append(this.gpsSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("angle:");
    sb.append(this.angle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mileage:");
    sb.append(this.mileage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGpsVaild:");
    sb.append(this.isGpsVaild);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInPark:");
    sb.append(this.isInPark);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInStartEnd:");
    sb.append(this.isInStartEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInLineUp:");
    sb.append(this.isInLineUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDoorOpen:");
    sb.append(this.isDoorOpen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArriveStop:");
    sb.append(this.isArriveStop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOperating:");
    sb.append(this.isOperating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInLine:");
    sb.append(this.isInLine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDiskGood:");
    sb.append(this.isDiskGood);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSDGood:");
    sb.append(this.isSDGood);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInNormalMode:");
    sb.append(this.isInNormalMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOverSpeed:");
    sb.append(this.isOverSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLinkDown:");
    sb.append(this.isLinkDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatingDetail:");
    if (this.operatingDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.operatingDetail);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (cityCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cityCode' was not present! Struct: " + toString());
    }
    if (industryCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'industryCode' was not present! Struct: " + toString());
    }
    if (orgCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orgCode' was not present! Struct: " + toString());
    }
    if (busId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'busId' was not present! Struct: " + toString());
    }
    if (lineId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineId' was not present! Struct: " + toString());
    }
    if (parkOrder == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parkOrder' was not present! Struct: " + toString());
    }
    if (parkId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parkId' was not present! Struct: " + toString());
    }
    if (stopOrder == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stopOrder' was not present! Struct: " + toString());
    }
    if (stopId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stopId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'lng' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'lat' because it's a primitive and you chose the non-beans generator.
    if (gpsTimestamp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gpsTimestamp' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sensorSpeed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gpsSpeed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'angle' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mileage' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isGpsVaild' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isInPark' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isInStartEnd' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isInLineUp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isDoorOpen' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isArriveStop' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isOperating' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isInLine' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isDiskGood' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isSDGood' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isInNormalMode' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isOverSpeed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isLinkDown' because it's a primitive and you chose the non-beans generator.
    if (operatingDetail == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatingDetail' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GpsBasicDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GpsBasicDataStandardScheme getScheme() {
      return new GpsBasicDataStandardScheme();
    }
  }

  private static class GpsBasicDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<GpsBasicData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GpsBasicData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDUSTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industryCode = iprot.readString();
              struct.setIndustryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busId = iprot.readString();
              struct.setBusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineId = iprot.readString();
              struct.setLineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARK_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parkOrder = iprot.readString();
              struct.setParkOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parkId = iprot.readString();
              struct.setParkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STOP_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopOrder = iprot.readString();
              struct.setStopOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopId = iprot.readString();
              struct.setStopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lng = iprot.readDouble();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lat = iprot.readDouble();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GPS_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gpsTimestamp = iprot.readString();
              struct.setGpsTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SENSOR_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sensorSpeed = iprot.readDouble();
              struct.setSensorSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // GPS_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gpsSpeed = iprot.readDouble();
              struct.setGpsSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ANGLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.angle = iprot.readDouble();
              struct.setAngleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MILEAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mileage = iprot.readDouble();
              struct.setMileageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_GPS_VAILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGpsVaild = iprot.readBool();
              struct.setIsGpsVaildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_IN_PARK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInPark = iprot.readBool();
              struct.setIsInParkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_IN_START_END
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInStartEnd = iprot.readBool();
              struct.setIsInStartEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_IN_LINE_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInLineUp = iprot.readBool();
              struct.setIsInLineUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_DOOR_OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDoorOpen = iprot.readBool();
              struct.setIsDoorOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_ARRIVE_STOP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isArriveStop = iprot.readBool();
              struct.setIsArriveStopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_OPERATING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOperating = iprot.readBool();
              struct.setIsOperatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_IN_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInLine = iprot.readBool();
              struct.setIsInLineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_DISK_GOOD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDiskGood = iprot.readBool();
              struct.setIsDiskGoodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IS_SDGOOD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSDGood = iprot.readBool();
              struct.setIsSDGoodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // IS_IN_NORMAL_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInNormalMode = iprot.readBool();
              struct.setIsInNormalModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // IS_OVER_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOverSpeed = iprot.readBool();
              struct.setIsOverSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IS_LINK_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLinkDown = iprot.readBool();
              struct.setIsLinkDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OPERATING_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatingDetail = cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType.findByValue(iprot.readI32());
              struct.setOperatingDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLng()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lng' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lat' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSensorSpeed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sensorSpeed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGpsSpeed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gpsSpeed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAngle()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'angle' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMileage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mileage' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsGpsVaild()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isGpsVaild' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsInPark()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isInPark' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsInStartEnd()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isInStartEnd' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsInLineUp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isInLineUp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsDoorOpen()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isDoorOpen' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsArriveStop()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isArriveStop' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsOperating()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isOperating' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsInLine()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isInLine' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsDiskGood()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isDiskGood' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsSDGood()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isSDGood' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsInNormalMode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isInNormalMode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsOverSpeed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isOverSpeed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsLinkDown()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isLinkDown' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GpsBasicData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cityCode != null) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.industryCode != null) {
        oprot.writeFieldBegin(INDUSTRY_CODE_FIELD_DESC);
        oprot.writeString(struct.industryCode);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.busId != null) {
        oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
        oprot.writeString(struct.busId);
        oprot.writeFieldEnd();
      }
      if (struct.lineId != null) {
        oprot.writeFieldBegin(LINE_ID_FIELD_DESC);
        oprot.writeString(struct.lineId);
        oprot.writeFieldEnd();
      }
      if (struct.parkOrder != null) {
        oprot.writeFieldBegin(PARK_ORDER_FIELD_DESC);
        oprot.writeString(struct.parkOrder);
        oprot.writeFieldEnd();
      }
      if (struct.parkId != null) {
        oprot.writeFieldBegin(PARK_ID_FIELD_DESC);
        oprot.writeString(struct.parkId);
        oprot.writeFieldEnd();
      }
      if (struct.stopOrder != null) {
        oprot.writeFieldBegin(STOP_ORDER_FIELD_DESC);
        oprot.writeString(struct.stopOrder);
        oprot.writeFieldEnd();
      }
      if (struct.stopId != null) {
        oprot.writeFieldBegin(STOP_ID_FIELD_DESC);
        oprot.writeString(struct.stopId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LNG_FIELD_DESC);
      oprot.writeDouble(struct.lng);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAT_FIELD_DESC);
      oprot.writeDouble(struct.lat);
      oprot.writeFieldEnd();
      if (struct.gpsTimestamp != null) {
        oprot.writeFieldBegin(GPS_TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.gpsTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENSOR_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.sensorSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GPS_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.gpsSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANGLE_FIELD_DESC);
      oprot.writeDouble(struct.angle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MILEAGE_FIELD_DESC);
      oprot.writeDouble(struct.mileage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GPS_VAILD_FIELD_DESC);
      oprot.writeBool(struct.isGpsVaild);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_PARK_FIELD_DESC);
      oprot.writeBool(struct.isInPark);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_START_END_FIELD_DESC);
      oprot.writeBool(struct.isInStartEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_LINE_UP_FIELD_DESC);
      oprot.writeBool(struct.isInLineUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DOOR_OPEN_FIELD_DESC);
      oprot.writeBool(struct.isDoorOpen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ARRIVE_STOP_FIELD_DESC);
      oprot.writeBool(struct.isArriveStop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OPERATING_FIELD_DESC);
      oprot.writeBool(struct.isOperating);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_LINE_FIELD_DESC);
      oprot.writeBool(struct.isInLine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DISK_GOOD_FIELD_DESC);
      oprot.writeBool(struct.isDiskGood);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SDGOOD_FIELD_DESC);
      oprot.writeBool(struct.isSDGood);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_NORMAL_MODE_FIELD_DESC);
      oprot.writeBool(struct.isInNormalMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OVER_SPEED_FIELD_DESC);
      oprot.writeBool(struct.isOverSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LINK_DOWN_FIELD_DESC);
      oprot.writeBool(struct.isLinkDown);
      oprot.writeFieldEnd();
      if (struct.operatingDetail != null) {
        oprot.writeFieldBegin(OPERATING_DETAIL_FIELD_DESC);
        oprot.writeI32(struct.operatingDetail.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GpsBasicDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GpsBasicDataTupleScheme getScheme() {
      return new GpsBasicDataTupleScheme();
    }
  }

  private static class GpsBasicDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<GpsBasicData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GpsBasicData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.cityCode);
      oprot.writeString(struct.industryCode);
      oprot.writeString(struct.orgCode);
      oprot.writeString(struct.busId);
      oprot.writeString(struct.lineId);
      oprot.writeString(struct.parkOrder);
      oprot.writeString(struct.parkId);
      oprot.writeString(struct.stopOrder);
      oprot.writeString(struct.stopId);
      oprot.writeDouble(struct.lng);
      oprot.writeDouble(struct.lat);
      oprot.writeString(struct.gpsTimestamp);
      oprot.writeDouble(struct.sensorSpeed);
      oprot.writeDouble(struct.gpsSpeed);
      oprot.writeDouble(struct.angle);
      oprot.writeDouble(struct.mileage);
      oprot.writeBool(struct.isGpsVaild);
      oprot.writeBool(struct.isInPark);
      oprot.writeBool(struct.isInStartEnd);
      oprot.writeBool(struct.isInLineUp);
      oprot.writeBool(struct.isDoorOpen);
      oprot.writeBool(struct.isArriveStop);
      oprot.writeBool(struct.isOperating);
      oprot.writeBool(struct.isInLine);
      oprot.writeBool(struct.isDiskGood);
      oprot.writeBool(struct.isSDGood);
      oprot.writeBool(struct.isInNormalMode);
      oprot.writeBool(struct.isOverSpeed);
      oprot.writeBool(struct.isLinkDown);
      oprot.writeI32(struct.operatingDetail.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GpsBasicData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.cityCode = iprot.readString();
      struct.setCityCodeIsSet(true);
      struct.industryCode = iprot.readString();
      struct.setIndustryCodeIsSet(true);
      struct.orgCode = iprot.readString();
      struct.setOrgCodeIsSet(true);
      struct.busId = iprot.readString();
      struct.setBusIdIsSet(true);
      struct.lineId = iprot.readString();
      struct.setLineIdIsSet(true);
      struct.parkOrder = iprot.readString();
      struct.setParkOrderIsSet(true);
      struct.parkId = iprot.readString();
      struct.setParkIdIsSet(true);
      struct.stopOrder = iprot.readString();
      struct.setStopOrderIsSet(true);
      struct.stopId = iprot.readString();
      struct.setStopIdIsSet(true);
      struct.lng = iprot.readDouble();
      struct.setLngIsSet(true);
      struct.lat = iprot.readDouble();
      struct.setLatIsSet(true);
      struct.gpsTimestamp = iprot.readString();
      struct.setGpsTimestampIsSet(true);
      struct.sensorSpeed = iprot.readDouble();
      struct.setSensorSpeedIsSet(true);
      struct.gpsSpeed = iprot.readDouble();
      struct.setGpsSpeedIsSet(true);
      struct.angle = iprot.readDouble();
      struct.setAngleIsSet(true);
      struct.mileage = iprot.readDouble();
      struct.setMileageIsSet(true);
      struct.isGpsVaild = iprot.readBool();
      struct.setIsGpsVaildIsSet(true);
      struct.isInPark = iprot.readBool();
      struct.setIsInParkIsSet(true);
      struct.isInStartEnd = iprot.readBool();
      struct.setIsInStartEndIsSet(true);
      struct.isInLineUp = iprot.readBool();
      struct.setIsInLineUpIsSet(true);
      struct.isDoorOpen = iprot.readBool();
      struct.setIsDoorOpenIsSet(true);
      struct.isArriveStop = iprot.readBool();
      struct.setIsArriveStopIsSet(true);
      struct.isOperating = iprot.readBool();
      struct.setIsOperatingIsSet(true);
      struct.isInLine = iprot.readBool();
      struct.setIsInLineIsSet(true);
      struct.isDiskGood = iprot.readBool();
      struct.setIsDiskGoodIsSet(true);
      struct.isSDGood = iprot.readBool();
      struct.setIsSDGoodIsSet(true);
      struct.isInNormalMode = iprot.readBool();
      struct.setIsInNormalModeIsSet(true);
      struct.isOverSpeed = iprot.readBool();
      struct.setIsOverSpeedIsSet(true);
      struct.isLinkDown = iprot.readBool();
      struct.setIsLinkDownIsSet(true);
      struct.operatingDetail = cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType.findByValue(iprot.readI32());
      struct.setOperatingDetailIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

