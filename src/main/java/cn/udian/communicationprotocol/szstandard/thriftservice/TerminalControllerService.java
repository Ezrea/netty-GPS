/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.udian.communicationprotocol.szstandard.thriftservice;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-07")
public class TerminalControllerService {

  public interface Iface {

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType disconnectTerminal(java.lang.String busId) throws org.apache.thrift.TException;

    public int countConnectedTerminals() throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType sendTextMessage(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, java.lang.String text) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo queryTerminalBasicInfo(java.lang.String busId) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalOperatingMode(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType, java.lang.String text) throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> queryTerminalStoredLines(java.lang.String busId) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalOperatingLine(java.lang.String busId, java.lang.String oldLineId, java.lang.String newlineId) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType rebootTerminal(java.lang.String busId) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType sendDriverReportResp(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode, int respCode) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType fileDownload(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path) throws org.apache.thrift.TException;

    public java.lang.String captureJpeg(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path) throws org.apache.thrift.TException;

    public java.lang.String videoUpload(java.lang.String busId, boolean isStart, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, int autoUploadTime, java.lang.String serverIp, int serverPort) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalTimingAndDistance(java.lang.String busId, int inerval, double distance) throws org.apache.thrift.TException;

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalNotificationStyle(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void disconnectTerminal(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

    public void countConnectedTerminals(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void sendTextMessage(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

    public void queryTerminalBasicInfo(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo> resultHandler) throws org.apache.thrift.TException;

    public void setTerminalOperatingMode(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

    public void queryTerminalStoredLines(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void setTerminalOperatingLine(java.lang.String busId, java.lang.String oldLineId, java.lang.String newlineId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

    public void rebootTerminal(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

    public void sendDriverReportResp(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode, int respCode, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

    public void fileDownload(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType> resultHandler) throws org.apache.thrift.TException;

    public void captureJpeg(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void videoUpload(java.lang.String busId, boolean isStart, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, int autoUploadTime, java.lang.String serverIp, int serverPort, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void setTerminalTimingAndDistance(java.lang.String busId, int inerval, double distance, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

    public void setTerminalNotificationStyle(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType disconnectTerminal(java.lang.String busId) throws org.apache.thrift.TException
    {
      send_disconnectTerminal(busId);
      return recv_disconnectTerminal();
    }

    public void send_disconnectTerminal(java.lang.String busId) throws org.apache.thrift.TException
    {
      disconnectTerminal_args args = new disconnectTerminal_args();
      args.setBusId(busId);
      sendBase("disconnectTerminal", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_disconnectTerminal() throws org.apache.thrift.TException
    {
      disconnectTerminal_result result = new disconnectTerminal_result();
      receiveBase(result, "disconnectTerminal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disconnectTerminal failed: unknown result");
    }

    public int countConnectedTerminals() throws org.apache.thrift.TException
    {
      send_countConnectedTerminals();
      return recv_countConnectedTerminals();
    }

    public void send_countConnectedTerminals() throws org.apache.thrift.TException
    {
      countConnectedTerminals_args args = new countConnectedTerminals_args();
      sendBase("countConnectedTerminals", args);
    }

    public int recv_countConnectedTerminals() throws org.apache.thrift.TException
    {
      countConnectedTerminals_result result = new countConnectedTerminals_result();
      receiveBase(result, "countConnectedTerminals");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countConnectedTerminals failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType sendTextMessage(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, java.lang.String text) throws org.apache.thrift.TException
    {
      send_sendTextMessage(busId, broadcastType, text);
      return recv_sendTextMessage();
    }

    public void send_sendTextMessage(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, java.lang.String text) throws org.apache.thrift.TException
    {
      sendTextMessage_args args = new sendTextMessage_args();
      args.setBusId(busId);
      args.setBroadcastType(broadcastType);
      args.setText(text);
      sendBase("sendTextMessage", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_sendTextMessage() throws org.apache.thrift.TException
    {
      sendTextMessage_result result = new sendTextMessage_result();
      receiveBase(result, "sendTextMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendTextMessage failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo queryTerminalBasicInfo(java.lang.String busId) throws org.apache.thrift.TException
    {
      send_queryTerminalBasicInfo(busId);
      return recv_queryTerminalBasicInfo();
    }

    public void send_queryTerminalBasicInfo(java.lang.String busId) throws org.apache.thrift.TException
    {
      queryTerminalBasicInfo_args args = new queryTerminalBasicInfo_args();
      args.setBusId(busId);
      sendBase("queryTerminalBasicInfo", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo recv_queryTerminalBasicInfo() throws org.apache.thrift.TException
    {
      queryTerminalBasicInfo_result result = new queryTerminalBasicInfo_result();
      receiveBase(result, "queryTerminalBasicInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTerminalBasicInfo failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalOperatingMode(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType, java.lang.String text) throws org.apache.thrift.TException
    {
      send_setTerminalOperatingMode(busId, broadcastType, operatingDetailType, text);
      return recv_setTerminalOperatingMode();
    }

    public void send_setTerminalOperatingMode(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType, java.lang.String text) throws org.apache.thrift.TException
    {
      setTerminalOperatingMode_args args = new setTerminalOperatingMode_args();
      args.setBusId(busId);
      args.setBroadcastType(broadcastType);
      args.setOperatingDetailType(operatingDetailType);
      args.setText(text);
      sendBase("setTerminalOperatingMode", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_setTerminalOperatingMode() throws org.apache.thrift.TException
    {
      setTerminalOperatingMode_result result = new setTerminalOperatingMode_result();
      receiveBase(result, "setTerminalOperatingMode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setTerminalOperatingMode failed: unknown result");
    }

    public java.util.List<java.lang.String> queryTerminalStoredLines(java.lang.String busId) throws org.apache.thrift.TException
    {
      send_queryTerminalStoredLines(busId);
      return recv_queryTerminalStoredLines();
    }

    public void send_queryTerminalStoredLines(java.lang.String busId) throws org.apache.thrift.TException
    {
      queryTerminalStoredLines_args args = new queryTerminalStoredLines_args();
      args.setBusId(busId);
      sendBase("queryTerminalStoredLines", args);
    }

    public java.util.List<java.lang.String> recv_queryTerminalStoredLines() throws org.apache.thrift.TException
    {
      queryTerminalStoredLines_result result = new queryTerminalStoredLines_result();
      receiveBase(result, "queryTerminalStoredLines");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTerminalStoredLines failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalOperatingLine(java.lang.String busId, java.lang.String oldLineId, java.lang.String newlineId) throws org.apache.thrift.TException
    {
      send_setTerminalOperatingLine(busId, oldLineId, newlineId);
      return recv_setTerminalOperatingLine();
    }

    public void send_setTerminalOperatingLine(java.lang.String busId, java.lang.String oldLineId, java.lang.String newlineId) throws org.apache.thrift.TException
    {
      setTerminalOperatingLine_args args = new setTerminalOperatingLine_args();
      args.setBusId(busId);
      args.setOldLineId(oldLineId);
      args.setNewlineId(newlineId);
      sendBase("setTerminalOperatingLine", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_setTerminalOperatingLine() throws org.apache.thrift.TException
    {
      setTerminalOperatingLine_result result = new setTerminalOperatingLine_result();
      receiveBase(result, "setTerminalOperatingLine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setTerminalOperatingLine failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType rebootTerminal(java.lang.String busId) throws org.apache.thrift.TException
    {
      send_rebootTerminal(busId);
      return recv_rebootTerminal();
    }

    public void send_rebootTerminal(java.lang.String busId) throws org.apache.thrift.TException
    {
      rebootTerminal_args args = new rebootTerminal_args();
      args.setBusId(busId);
      sendBase("rebootTerminal", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_rebootTerminal() throws org.apache.thrift.TException
    {
      rebootTerminal_result result = new rebootTerminal_result();
      receiveBase(result, "rebootTerminal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rebootTerminal failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType sendDriverReportResp(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode, int respCode) throws org.apache.thrift.TException
    {
      send_sendDriverReportResp(busId, reqCode, respCode);
      return recv_sendDriverReportResp();
    }

    public void send_sendDriverReportResp(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode, int respCode) throws org.apache.thrift.TException
    {
      sendDriverReportResp_args args = new sendDriverReportResp_args();
      args.setBusId(busId);
      args.setReqCode(reqCode);
      args.setRespCode(respCode);
      sendBase("sendDriverReportResp", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_sendDriverReportResp() throws org.apache.thrift.TException
    {
      sendDriverReportResp_result result = new sendDriverReportResp_result();
      receiveBase(result, "sendDriverReportResp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendDriverReportResp failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType fileDownload(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path) throws org.apache.thrift.TException
    {
      send_fileDownload(busId, fileType, serverIp, serverPort, userName, password, path);
      return recv_fileDownload();
    }

    public void send_fileDownload(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path) throws org.apache.thrift.TException
    {
      fileDownload_args args = new fileDownload_args();
      args.setBusId(busId);
      args.setFileType(fileType);
      args.setServerIp(serverIp);
      args.setServerPort(serverPort);
      args.setUserName(userName);
      args.setPassword(password);
      args.setPath(path);
      sendBase("fileDownload", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType recv_fileDownload() throws org.apache.thrift.TException
    {
      fileDownload_result result = new fileDownload_result();
      receiveBase(result, "fileDownload");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fileDownload failed: unknown result");
    }

    public java.lang.String captureJpeg(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path) throws org.apache.thrift.TException
    {
      send_captureJpeg(busId, captureJpegDeviceType, channelNumber, captureJpegPixels, multimediaQuality, serverIp, serverPort, userName, password, path);
      return recv_captureJpeg();
    }

    public void send_captureJpeg(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path) throws org.apache.thrift.TException
    {
      captureJpeg_args args = new captureJpeg_args();
      args.setBusId(busId);
      args.setCaptureJpegDeviceType(captureJpegDeviceType);
      args.setChannelNumber(channelNumber);
      args.setCaptureJpegPixels(captureJpegPixels);
      args.setMultimediaQuality(multimediaQuality);
      args.setServerIp(serverIp);
      args.setServerPort(serverPort);
      args.setUserName(userName);
      args.setPassword(password);
      args.setPath(path);
      sendBase("captureJpeg", args);
    }

    public java.lang.String recv_captureJpeg() throws org.apache.thrift.TException
    {
      captureJpeg_result result = new captureJpeg_result();
      receiveBase(result, "captureJpeg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "captureJpeg failed: unknown result");
    }

    public java.lang.String videoUpload(java.lang.String busId, boolean isStart, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, int autoUploadTime, java.lang.String serverIp, int serverPort) throws org.apache.thrift.TException
    {
      send_videoUpload(busId, isStart, channelNumber, videoPixels, multimediaQuality, autoUploadTime, serverIp, serverPort);
      return recv_videoUpload();
    }

    public void send_videoUpload(java.lang.String busId, boolean isStart, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, int autoUploadTime, java.lang.String serverIp, int serverPort) throws org.apache.thrift.TException
    {
      videoUpload_args args = new videoUpload_args();
      args.setBusId(busId);
      args.setIsStart(isStart);
      args.setChannelNumber(channelNumber);
      args.setVideoPixels(videoPixels);
      args.setMultimediaQuality(multimediaQuality);
      args.setAutoUploadTime(autoUploadTime);
      args.setServerIp(serverIp);
      args.setServerPort(serverPort);
      sendBase("videoUpload", args);
    }

    public java.lang.String recv_videoUpload() throws org.apache.thrift.TException
    {
      videoUpload_result result = new videoUpload_result();
      receiveBase(result, "videoUpload");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "videoUpload failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalTimingAndDistance(java.lang.String busId, int inerval, double distance) throws org.apache.thrift.TException
    {
      send_setTerminalTimingAndDistance(busId, inerval, distance);
      return recv_setTerminalTimingAndDistance();
    }

    public void send_setTerminalTimingAndDistance(java.lang.String busId, int inerval, double distance) throws org.apache.thrift.TException
    {
      setTerminalTimingAndDistance_args args = new setTerminalTimingAndDistance_args();
      args.setBusId(busId);
      args.setInerval(inerval);
      args.setDistance(distance);
      sendBase("setTerminalTimingAndDistance", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_setTerminalTimingAndDistance() throws org.apache.thrift.TException
    {
      setTerminalTimingAndDistance_result result = new setTerminalTimingAndDistance_result();
      receiveBase(result, "setTerminalTimingAndDistance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setTerminalTimingAndDistance failed: unknown result");
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType setTerminalNotificationStyle(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style) throws org.apache.thrift.TException
    {
      send_setTerminalNotificationStyle(busId, style);
      return recv_setTerminalNotificationStyle();
    }

    public void send_setTerminalNotificationStyle(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style) throws org.apache.thrift.TException
    {
      setTerminalNotificationStyle_args args = new setTerminalNotificationStyle_args();
      args.setBusId(busId);
      args.setStyle(style);
      sendBase("setTerminalNotificationStyle", args);
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType recv_setTerminalNotificationStyle() throws org.apache.thrift.TException
    {
      setTerminalNotificationStyle_result result = new setTerminalNotificationStyle_result();
      receiveBase(result, "setTerminalNotificationStyle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setTerminalNotificationStyle failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void disconnectTerminal(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disconnectTerminal_call method_call = new disconnectTerminal_call(busId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disconnectTerminal_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      public disconnectTerminal_call(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disconnectTerminal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disconnectTerminal_args args = new disconnectTerminal_args();
        args.setBusId(busId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disconnectTerminal();
      }
    }

    public void countConnectedTerminals(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countConnectedTerminals_call method_call = new countConnectedTerminals_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countConnectedTerminals_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      public countConnectedTerminals_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countConnectedTerminals", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countConnectedTerminals_args args = new countConnectedTerminals_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countConnectedTerminals();
      }
    }

    public void sendTextMessage(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendTextMessage_call method_call = new sendTextMessage_call(busId, broadcastType, text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTextMessage_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      private cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType;
      private java.lang.String text;
      public sendTextMessage_call(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.broadcastType = broadcastType;
        this.text = text;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTextMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendTextMessage_args args = new sendTextMessage_args();
        args.setBusId(busId);
        args.setBroadcastType(broadcastType);
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendTextMessage();
      }
    }

    public void queryTerminalBasicInfo(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTerminalBasicInfo_call method_call = new queryTerminalBasicInfo_call(busId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTerminalBasicInfo_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo> {
      private java.lang.String busId;
      public queryTerminalBasicInfo_call(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTerminalBasicInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTerminalBasicInfo_args args = new queryTerminalBasicInfo_args();
        args.setBusId(busId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTerminalBasicInfo();
      }
    }

    public void setTerminalOperatingMode(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setTerminalOperatingMode_call method_call = new setTerminalOperatingMode_call(busId, broadcastType, operatingDetailType, text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setTerminalOperatingMode_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      private cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType;
      private cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType;
      private java.lang.String text;
      public setTerminalOperatingMode_call(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType, cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.broadcastType = broadcastType;
        this.operatingDetailType = operatingDetailType;
        this.text = text;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setTerminalOperatingMode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setTerminalOperatingMode_args args = new setTerminalOperatingMode_args();
        args.setBusId(busId);
        args.setBroadcastType(broadcastType);
        args.setOperatingDetailType(operatingDetailType);
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setTerminalOperatingMode();
      }
    }

    public void queryTerminalStoredLines(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTerminalStoredLines_call method_call = new queryTerminalStoredLines_call(busId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTerminalStoredLines_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String busId;
      public queryTerminalStoredLines_call(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTerminalStoredLines", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTerminalStoredLines_args args = new queryTerminalStoredLines_args();
        args.setBusId(busId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTerminalStoredLines();
      }
    }

    public void setTerminalOperatingLine(java.lang.String busId, java.lang.String oldLineId, java.lang.String newlineId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setTerminalOperatingLine_call method_call = new setTerminalOperatingLine_call(busId, oldLineId, newlineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setTerminalOperatingLine_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      private java.lang.String oldLineId;
      private java.lang.String newlineId;
      public setTerminalOperatingLine_call(java.lang.String busId, java.lang.String oldLineId, java.lang.String newlineId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.oldLineId = oldLineId;
        this.newlineId = newlineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setTerminalOperatingLine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setTerminalOperatingLine_args args = new setTerminalOperatingLine_args();
        args.setBusId(busId);
        args.setOldLineId(oldLineId);
        args.setNewlineId(newlineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setTerminalOperatingLine();
      }
    }

    public void rebootTerminal(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rebootTerminal_call method_call = new rebootTerminal_call(busId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rebootTerminal_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      public rebootTerminal_call(java.lang.String busId, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rebootTerminal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rebootTerminal_args args = new rebootTerminal_args();
        args.setBusId(busId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rebootTerminal();
      }
    }

    public void sendDriverReportResp(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode, int respCode, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendDriverReportResp_call method_call = new sendDriverReportResp_call(busId, reqCode, respCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendDriverReportResp_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      private cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode;
      private int respCode;
      public sendDriverReportResp_call(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode, int respCode, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.reqCode = reqCode;
        this.respCode = respCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendDriverReportResp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendDriverReportResp_args args = new sendDriverReportResp_args();
        args.setBusId(busId);
        args.setReqCode(reqCode);
        args.setRespCode(respCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendDriverReportResp();
      }
    }

    public void fileDownload(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileDownload_call method_call = new fileDownload_call(busId, fileType, serverIp, serverPort, userName, password, path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileDownload_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType> {
      private java.lang.String busId;
      private cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType;
      private java.lang.String serverIp;
      private int serverPort;
      private java.lang.String userName;
      private java.lang.String password;
      private java.lang.String path;
      public fileDownload_call(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.fileType = fileType;
        this.serverIp = serverIp;
        this.serverPort = serverPort;
        this.userName = userName;
        this.password = password;
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileDownload", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fileDownload_args args = new fileDownload_args();
        args.setBusId(busId);
        args.setFileType(fileType);
        args.setServerIp(serverIp);
        args.setServerPort(serverPort);
        args.setUserName(userName);
        args.setPassword(password);
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fileDownload();
      }
    }

    public void captureJpeg(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      captureJpeg_call method_call = new captureJpeg_call(busId, captureJpegDeviceType, channelNumber, captureJpegPixels, multimediaQuality, serverIp, serverPort, userName, password, path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class captureJpeg_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String busId;
      private cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType;
      private cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber;
      private cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels;
      private cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality;
      private java.lang.String serverIp;
      private int serverPort;
      private java.lang.String userName;
      private java.lang.String password;
      private java.lang.String path;
      public captureJpeg_call(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, java.lang.String serverIp, int serverPort, java.lang.String userName, java.lang.String password, java.lang.String path, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.captureJpegDeviceType = captureJpegDeviceType;
        this.channelNumber = channelNumber;
        this.captureJpegPixels = captureJpegPixels;
        this.multimediaQuality = multimediaQuality;
        this.serverIp = serverIp;
        this.serverPort = serverPort;
        this.userName = userName;
        this.password = password;
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("captureJpeg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        captureJpeg_args args = new captureJpeg_args();
        args.setBusId(busId);
        args.setCaptureJpegDeviceType(captureJpegDeviceType);
        args.setChannelNumber(channelNumber);
        args.setCaptureJpegPixels(captureJpegPixels);
        args.setMultimediaQuality(multimediaQuality);
        args.setServerIp(serverIp);
        args.setServerPort(serverPort);
        args.setUserName(userName);
        args.setPassword(password);
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_captureJpeg();
      }
    }

    public void videoUpload(java.lang.String busId, boolean isStart, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, int autoUploadTime, java.lang.String serverIp, int serverPort, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      videoUpload_call method_call = new videoUpload_call(busId, isStart, channelNumber, videoPixels, multimediaQuality, autoUploadTime, serverIp, serverPort, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class videoUpload_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String busId;
      private boolean isStart;
      private cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber;
      private cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels;
      private cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality;
      private int autoUploadTime;
      private java.lang.String serverIp;
      private int serverPort;
      public videoUpload_call(java.lang.String busId, boolean isStart, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber, cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality, int autoUploadTime, java.lang.String serverIp, int serverPort, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.isStart = isStart;
        this.channelNumber = channelNumber;
        this.videoPixels = videoPixels;
        this.multimediaQuality = multimediaQuality;
        this.autoUploadTime = autoUploadTime;
        this.serverIp = serverIp;
        this.serverPort = serverPort;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("videoUpload", org.apache.thrift.protocol.TMessageType.CALL, 0));
        videoUpload_args args = new videoUpload_args();
        args.setBusId(busId);
        args.setIsStart(isStart);
        args.setChannelNumber(channelNumber);
        args.setVideoPixels(videoPixels);
        args.setMultimediaQuality(multimediaQuality);
        args.setAutoUploadTime(autoUploadTime);
        args.setServerIp(serverIp);
        args.setServerPort(serverPort);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_videoUpload();
      }
    }

    public void setTerminalTimingAndDistance(java.lang.String busId, int inerval, double distance, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setTerminalTimingAndDistance_call method_call = new setTerminalTimingAndDistance_call(busId, inerval, distance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setTerminalTimingAndDistance_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      private int inerval;
      private double distance;
      public setTerminalTimingAndDistance_call(java.lang.String busId, int inerval, double distance, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.inerval = inerval;
        this.distance = distance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setTerminalTimingAndDistance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setTerminalTimingAndDistance_args args = new setTerminalTimingAndDistance_args();
        args.setBusId(busId);
        args.setInerval(inerval);
        args.setDistance(distance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setTerminalTimingAndDistance();
      }
    }

    public void setTerminalNotificationStyle(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setTerminalNotificationStyle_call method_call = new setTerminalNotificationStyle_call(busId, style, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setTerminalNotificationStyle_call extends org.apache.thrift.async.TAsyncMethodCall<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      private java.lang.String busId;
      private cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style;
      public setTerminalNotificationStyle_call(java.lang.String busId, cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.busId = busId;
        this.style = style;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setTerminalNotificationStyle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setTerminalNotificationStyle_args args = new setTerminalNotificationStyle_args();
        args.setBusId(busId);
        args.setStyle(style);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setTerminalNotificationStyle();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("disconnectTerminal", new disconnectTerminal());
      processMap.put("countConnectedTerminals", new countConnectedTerminals());
      processMap.put("sendTextMessage", new sendTextMessage());
      processMap.put("queryTerminalBasicInfo", new queryTerminalBasicInfo());
      processMap.put("setTerminalOperatingMode", new setTerminalOperatingMode());
      processMap.put("queryTerminalStoredLines", new queryTerminalStoredLines());
      processMap.put("setTerminalOperatingLine", new setTerminalOperatingLine());
      processMap.put("rebootTerminal", new rebootTerminal());
      processMap.put("sendDriverReportResp", new sendDriverReportResp());
      processMap.put("fileDownload", new fileDownload());
      processMap.put("captureJpeg", new captureJpeg());
      processMap.put("videoUpload", new videoUpload());
      processMap.put("setTerminalTimingAndDistance", new setTerminalTimingAndDistance());
      processMap.put("setTerminalNotificationStyle", new setTerminalNotificationStyle());
      return processMap;
    }

    public static class disconnectTerminal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disconnectTerminal_args> {
      public disconnectTerminal() {
        super("disconnectTerminal");
      }

      public disconnectTerminal_args getEmptyArgsInstance() {
        return new disconnectTerminal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disconnectTerminal_result getResult(I iface, disconnectTerminal_args args) throws org.apache.thrift.TException {
        disconnectTerminal_result result = new disconnectTerminal_result();
        result.success = iface.disconnectTerminal(args.busId);
        return result;
      }
    }

    public static class countConnectedTerminals<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countConnectedTerminals_args> {
      public countConnectedTerminals() {
        super("countConnectedTerminals");
      }

      public countConnectedTerminals_args getEmptyArgsInstance() {
        return new countConnectedTerminals_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countConnectedTerminals_result getResult(I iface, countConnectedTerminals_args args) throws org.apache.thrift.TException {
        countConnectedTerminals_result result = new countConnectedTerminals_result();
        result.success = iface.countConnectedTerminals();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendTextMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTextMessage_args> {
      public sendTextMessage() {
        super("sendTextMessage");
      }

      public sendTextMessage_args getEmptyArgsInstance() {
        return new sendTextMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendTextMessage_result getResult(I iface, sendTextMessage_args args) throws org.apache.thrift.TException {
        sendTextMessage_result result = new sendTextMessage_result();
        result.success = iface.sendTextMessage(args.busId, args.broadcastType, args.text);
        return result;
      }
    }

    public static class queryTerminalBasicInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTerminalBasicInfo_args> {
      public queryTerminalBasicInfo() {
        super("queryTerminalBasicInfo");
      }

      public queryTerminalBasicInfo_args getEmptyArgsInstance() {
        return new queryTerminalBasicInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTerminalBasicInfo_result getResult(I iface, queryTerminalBasicInfo_args args) throws org.apache.thrift.TException {
        queryTerminalBasicInfo_result result = new queryTerminalBasicInfo_result();
        result.success = iface.queryTerminalBasicInfo(args.busId);
        return result;
      }
    }

    public static class setTerminalOperatingMode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setTerminalOperatingMode_args> {
      public setTerminalOperatingMode() {
        super("setTerminalOperatingMode");
      }

      public setTerminalOperatingMode_args getEmptyArgsInstance() {
        return new setTerminalOperatingMode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setTerminalOperatingMode_result getResult(I iface, setTerminalOperatingMode_args args) throws org.apache.thrift.TException {
        setTerminalOperatingMode_result result = new setTerminalOperatingMode_result();
        result.success = iface.setTerminalOperatingMode(args.busId, args.broadcastType, args.operatingDetailType, args.text);
        return result;
      }
    }

    public static class queryTerminalStoredLines<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTerminalStoredLines_args> {
      public queryTerminalStoredLines() {
        super("queryTerminalStoredLines");
      }

      public queryTerminalStoredLines_args getEmptyArgsInstance() {
        return new queryTerminalStoredLines_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTerminalStoredLines_result getResult(I iface, queryTerminalStoredLines_args args) throws org.apache.thrift.TException {
        queryTerminalStoredLines_result result = new queryTerminalStoredLines_result();
        result.success = iface.queryTerminalStoredLines(args.busId);
        return result;
      }
    }

    public static class setTerminalOperatingLine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setTerminalOperatingLine_args> {
      public setTerminalOperatingLine() {
        super("setTerminalOperatingLine");
      }

      public setTerminalOperatingLine_args getEmptyArgsInstance() {
        return new setTerminalOperatingLine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setTerminalOperatingLine_result getResult(I iface, setTerminalOperatingLine_args args) throws org.apache.thrift.TException {
        setTerminalOperatingLine_result result = new setTerminalOperatingLine_result();
        result.success = iface.setTerminalOperatingLine(args.busId, args.oldLineId, args.newlineId);
        return result;
      }
    }

    public static class rebootTerminal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rebootTerminal_args> {
      public rebootTerminal() {
        super("rebootTerminal");
      }

      public rebootTerminal_args getEmptyArgsInstance() {
        return new rebootTerminal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rebootTerminal_result getResult(I iface, rebootTerminal_args args) throws org.apache.thrift.TException {
        rebootTerminal_result result = new rebootTerminal_result();
        result.success = iface.rebootTerminal(args.busId);
        return result;
      }
    }

    public static class sendDriverReportResp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendDriverReportResp_args> {
      public sendDriverReportResp() {
        super("sendDriverReportResp");
      }

      public sendDriverReportResp_args getEmptyArgsInstance() {
        return new sendDriverReportResp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendDriverReportResp_result getResult(I iface, sendDriverReportResp_args args) throws org.apache.thrift.TException {
        sendDriverReportResp_result result = new sendDriverReportResp_result();
        result.success = iface.sendDriverReportResp(args.busId, args.reqCode, args.respCode);
        return result;
      }
    }

    public static class fileDownload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileDownload_args> {
      public fileDownload() {
        super("fileDownload");
      }

      public fileDownload_args getEmptyArgsInstance() {
        return new fileDownload_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fileDownload_result getResult(I iface, fileDownload_args args) throws org.apache.thrift.TException {
        fileDownload_result result = new fileDownload_result();
        result.success = iface.fileDownload(args.busId, args.fileType, args.serverIp, args.serverPort, args.userName, args.password, args.path);
        return result;
      }
    }

    public static class captureJpeg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, captureJpeg_args> {
      public captureJpeg() {
        super("captureJpeg");
      }

      public captureJpeg_args getEmptyArgsInstance() {
        return new captureJpeg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public captureJpeg_result getResult(I iface, captureJpeg_args args) throws org.apache.thrift.TException {
        captureJpeg_result result = new captureJpeg_result();
        result.success = iface.captureJpeg(args.busId, args.captureJpegDeviceType, args.channelNumber, args.captureJpegPixels, args.multimediaQuality, args.serverIp, args.serverPort, args.userName, args.password, args.path);
        return result;
      }
    }

    public static class videoUpload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, videoUpload_args> {
      public videoUpload() {
        super("videoUpload");
      }

      public videoUpload_args getEmptyArgsInstance() {
        return new videoUpload_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public videoUpload_result getResult(I iface, videoUpload_args args) throws org.apache.thrift.TException {
        videoUpload_result result = new videoUpload_result();
        result.success = iface.videoUpload(args.busId, args.isStart, args.channelNumber, args.videoPixels, args.multimediaQuality, args.autoUploadTime, args.serverIp, args.serverPort);
        return result;
      }
    }

    public static class setTerminalTimingAndDistance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setTerminalTimingAndDistance_args> {
      public setTerminalTimingAndDistance() {
        super("setTerminalTimingAndDistance");
      }

      public setTerminalTimingAndDistance_args getEmptyArgsInstance() {
        return new setTerminalTimingAndDistance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setTerminalTimingAndDistance_result getResult(I iface, setTerminalTimingAndDistance_args args) throws org.apache.thrift.TException {
        setTerminalTimingAndDistance_result result = new setTerminalTimingAndDistance_result();
        result.success = iface.setTerminalTimingAndDistance(args.busId, args.inerval, args.distance);
        return result;
      }
    }

    public static class setTerminalNotificationStyle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setTerminalNotificationStyle_args> {
      public setTerminalNotificationStyle() {
        super("setTerminalNotificationStyle");
      }

      public setTerminalNotificationStyle_args getEmptyArgsInstance() {
        return new setTerminalNotificationStyle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setTerminalNotificationStyle_result getResult(I iface, setTerminalNotificationStyle_args args) throws org.apache.thrift.TException {
        setTerminalNotificationStyle_result result = new setTerminalNotificationStyle_result();
        result.success = iface.setTerminalNotificationStyle(args.busId, args.style);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("disconnectTerminal", new disconnectTerminal());
      processMap.put("countConnectedTerminals", new countConnectedTerminals());
      processMap.put("sendTextMessage", new sendTextMessage());
      processMap.put("queryTerminalBasicInfo", new queryTerminalBasicInfo());
      processMap.put("setTerminalOperatingMode", new setTerminalOperatingMode());
      processMap.put("queryTerminalStoredLines", new queryTerminalStoredLines());
      processMap.put("setTerminalOperatingLine", new setTerminalOperatingLine());
      processMap.put("rebootTerminal", new rebootTerminal());
      processMap.put("sendDriverReportResp", new sendDriverReportResp());
      processMap.put("fileDownload", new fileDownload());
      processMap.put("captureJpeg", new captureJpeg());
      processMap.put("videoUpload", new videoUpload());
      processMap.put("setTerminalTimingAndDistance", new setTerminalTimingAndDistance());
      processMap.put("setTerminalNotificationStyle", new setTerminalNotificationStyle());
      return processMap;
    }

    public static class disconnectTerminal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disconnectTerminal_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public disconnectTerminal() {
        super("disconnectTerminal");
      }

      public disconnectTerminal_args getEmptyArgsInstance() {
        return new disconnectTerminal_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            disconnectTerminal_result result = new disconnectTerminal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            disconnectTerminal_result result = new disconnectTerminal_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disconnectTerminal_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.disconnectTerminal(args.busId,resultHandler);
      }
    }

    public static class countConnectedTerminals<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countConnectedTerminals_args, java.lang.Integer> {
      public countConnectedTerminals() {
        super("countConnectedTerminals");
      }

      public countConnectedTerminals_args getEmptyArgsInstance() {
        return new countConnectedTerminals_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            countConnectedTerminals_result result = new countConnectedTerminals_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countConnectedTerminals_result result = new countConnectedTerminals_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countConnectedTerminals_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.countConnectedTerminals(resultHandler);
      }
    }

    public static class sendTextMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendTextMessage_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public sendTextMessage() {
        super("sendTextMessage");
      }

      public sendTextMessage_args getEmptyArgsInstance() {
        return new sendTextMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            sendTextMessage_result result = new sendTextMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendTextMessage_result result = new sendTextMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendTextMessage_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.sendTextMessage(args.busId, args.broadcastType, args.text,resultHandler);
      }
    }

    public static class queryTerminalBasicInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTerminalBasicInfo_args, cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo> {
      public queryTerminalBasicInfo() {
        super("queryTerminalBasicInfo");
      }

      public queryTerminalBasicInfo_args getEmptyArgsInstance() {
        return new queryTerminalBasicInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo o) {
            queryTerminalBasicInfo_result result = new queryTerminalBasicInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryTerminalBasicInfo_result result = new queryTerminalBasicInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTerminalBasicInfo_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo> resultHandler) throws org.apache.thrift.TException {
        iface.queryTerminalBasicInfo(args.busId,resultHandler);
      }
    }

    public static class setTerminalOperatingMode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setTerminalOperatingMode_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public setTerminalOperatingMode() {
        super("setTerminalOperatingMode");
      }

      public setTerminalOperatingMode_args getEmptyArgsInstance() {
        return new setTerminalOperatingMode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            setTerminalOperatingMode_result result = new setTerminalOperatingMode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setTerminalOperatingMode_result result = new setTerminalOperatingMode_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setTerminalOperatingMode_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.setTerminalOperatingMode(args.busId, args.broadcastType, args.operatingDetailType, args.text,resultHandler);
      }
    }

    public static class queryTerminalStoredLines<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTerminalStoredLines_args, java.util.List<java.lang.String>> {
      public queryTerminalStoredLines() {
        super("queryTerminalStoredLines");
      }

      public queryTerminalStoredLines_args getEmptyArgsInstance() {
        return new queryTerminalStoredLines_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            queryTerminalStoredLines_result result = new queryTerminalStoredLines_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryTerminalStoredLines_result result = new queryTerminalStoredLines_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTerminalStoredLines_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.queryTerminalStoredLines(args.busId,resultHandler);
      }
    }

    public static class setTerminalOperatingLine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setTerminalOperatingLine_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public setTerminalOperatingLine() {
        super("setTerminalOperatingLine");
      }

      public setTerminalOperatingLine_args getEmptyArgsInstance() {
        return new setTerminalOperatingLine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            setTerminalOperatingLine_result result = new setTerminalOperatingLine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setTerminalOperatingLine_result result = new setTerminalOperatingLine_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setTerminalOperatingLine_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.setTerminalOperatingLine(args.busId, args.oldLineId, args.newlineId,resultHandler);
      }
    }

    public static class rebootTerminal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rebootTerminal_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public rebootTerminal() {
        super("rebootTerminal");
      }

      public rebootTerminal_args getEmptyArgsInstance() {
        return new rebootTerminal_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            rebootTerminal_result result = new rebootTerminal_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rebootTerminal_result result = new rebootTerminal_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rebootTerminal_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.rebootTerminal(args.busId,resultHandler);
      }
    }

    public static class sendDriverReportResp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendDriverReportResp_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public sendDriverReportResp() {
        super("sendDriverReportResp");
      }

      public sendDriverReportResp_args getEmptyArgsInstance() {
        return new sendDriverReportResp_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            sendDriverReportResp_result result = new sendDriverReportResp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendDriverReportResp_result result = new sendDriverReportResp_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendDriverReportResp_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.sendDriverReportResp(args.busId, args.reqCode, args.respCode,resultHandler);
      }
    }

    public static class fileDownload<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fileDownload_args, cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType> {
      public fileDownload() {
        super("fileDownload");
      }

      public fileDownload_args getEmptyArgsInstance() {
        return new fileDownload_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType o) {
            fileDownload_result result = new fileDownload_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fileDownload_result result = new fileDownload_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fileDownload_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType> resultHandler) throws org.apache.thrift.TException {
        iface.fileDownload(args.busId, args.fileType, args.serverIp, args.serverPort, args.userName, args.password, args.path,resultHandler);
      }
    }

    public static class captureJpeg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, captureJpeg_args, java.lang.String> {
      public captureJpeg() {
        super("captureJpeg");
      }

      public captureJpeg_args getEmptyArgsInstance() {
        return new captureJpeg_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            captureJpeg_result result = new captureJpeg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            captureJpeg_result result = new captureJpeg_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, captureJpeg_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.captureJpeg(args.busId, args.captureJpegDeviceType, args.channelNumber, args.captureJpegPixels, args.multimediaQuality, args.serverIp, args.serverPort, args.userName, args.password, args.path,resultHandler);
      }
    }

    public static class videoUpload<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, videoUpload_args, java.lang.String> {
      public videoUpload() {
        super("videoUpload");
      }

      public videoUpload_args getEmptyArgsInstance() {
        return new videoUpload_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            videoUpload_result result = new videoUpload_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            videoUpload_result result = new videoUpload_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, videoUpload_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.videoUpload(args.busId, args.isStart, args.channelNumber, args.videoPixels, args.multimediaQuality, args.autoUploadTime, args.serverIp, args.serverPort,resultHandler);
      }
    }

    public static class setTerminalTimingAndDistance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setTerminalTimingAndDistance_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public setTerminalTimingAndDistance() {
        super("setTerminalTimingAndDistance");
      }

      public setTerminalTimingAndDistance_args getEmptyArgsInstance() {
        return new setTerminalTimingAndDistance_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            setTerminalTimingAndDistance_result result = new setTerminalTimingAndDistance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setTerminalTimingAndDistance_result result = new setTerminalTimingAndDistance_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setTerminalTimingAndDistance_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.setTerminalTimingAndDistance(args.busId, args.inerval, args.distance,resultHandler);
      }
    }

    public static class setTerminalNotificationStyle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setTerminalNotificationStyle_args, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> {
      public setTerminalNotificationStyle() {
        super("setTerminalNotificationStyle");
      }

      public setTerminalNotificationStyle_args getEmptyArgsInstance() {
        return new setTerminalNotificationStyle_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType>() { 
          public void onComplete(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType o) {
            setTerminalNotificationStyle_result result = new setTerminalNotificationStyle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setTerminalNotificationStyle_result result = new setTerminalNotificationStyle_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setTerminalNotificationStyle_args args, org.apache.thrift.async.AsyncMethodCallback<cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType> resultHandler) throws org.apache.thrift.TException {
        iface.setTerminalNotificationStyle(args.busId, args.style,resultHandler);
      }
    }

  }

  public static class disconnectTerminal_args implements org.apache.thrift.TBase<disconnectTerminal_args, disconnectTerminal_args._Fields>, java.io.Serializable, Cloneable, Comparable<disconnectTerminal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnectTerminal_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disconnectTerminal_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disconnectTerminal_argsTupleSchemeFactory();

    public java.lang.String busId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnectTerminal_args.class, metaDataMap);
    }

    public disconnectTerminal_args() {
    }

    public disconnectTerminal_args(
      java.lang.String busId)
    {
      this();
      this.busId = busId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnectTerminal_args(disconnectTerminal_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
    }

    public disconnectTerminal_args deepCopy() {
      return new disconnectTerminal_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public disconnectTerminal_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnectTerminal_args)
        return this.equals((disconnectTerminal_args)that);
      return false;
    }

    public boolean equals(disconnectTerminal_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(disconnectTerminal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disconnectTerminal_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnectTerminal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnectTerminal_argsStandardScheme getScheme() {
        return new disconnectTerminal_argsStandardScheme();
      }
    }

    private static class disconnectTerminal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<disconnectTerminal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnectTerminal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnectTerminal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnectTerminal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnectTerminal_argsTupleScheme getScheme() {
        return new disconnectTerminal_argsTupleScheme();
      }
    }

    private static class disconnectTerminal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<disconnectTerminal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnectTerminal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnectTerminal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class disconnectTerminal_result implements org.apache.thrift.TBase<disconnectTerminal_result, disconnectTerminal_result._Fields>, java.io.Serializable, Cloneable, Comparable<disconnectTerminal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnectTerminal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disconnectTerminal_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disconnectTerminal_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnectTerminal_result.class, metaDataMap);
    }

    public disconnectTerminal_result() {
    }

    public disconnectTerminal_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnectTerminal_result(disconnectTerminal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public disconnectTerminal_result deepCopy() {
      return new disconnectTerminal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public disconnectTerminal_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnectTerminal_result)
        return this.equals((disconnectTerminal_result)that);
      return false;
    }

    public boolean equals(disconnectTerminal_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(disconnectTerminal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disconnectTerminal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnectTerminal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnectTerminal_resultStandardScheme getScheme() {
        return new disconnectTerminal_resultStandardScheme();
      }
    }

    private static class disconnectTerminal_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<disconnectTerminal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnectTerminal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnectTerminal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnectTerminal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disconnectTerminal_resultTupleScheme getScheme() {
        return new disconnectTerminal_resultTupleScheme();
      }
    }

    private static class disconnectTerminal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<disconnectTerminal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnectTerminal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnectTerminal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countConnectedTerminals_args implements org.apache.thrift.TBase<countConnectedTerminals_args, countConnectedTerminals_args._Fields>, java.io.Serializable, Cloneable, Comparable<countConnectedTerminals_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countConnectedTerminals_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countConnectedTerminals_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countConnectedTerminals_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countConnectedTerminals_args.class, metaDataMap);
    }

    public countConnectedTerminals_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countConnectedTerminals_args(countConnectedTerminals_args other) {
    }

    public countConnectedTerminals_args deepCopy() {
      return new countConnectedTerminals_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countConnectedTerminals_args)
        return this.equals((countConnectedTerminals_args)that);
      return false;
    }

    public boolean equals(countConnectedTerminals_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(countConnectedTerminals_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countConnectedTerminals_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countConnectedTerminals_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countConnectedTerminals_argsStandardScheme getScheme() {
        return new countConnectedTerminals_argsStandardScheme();
      }
    }

    private static class countConnectedTerminals_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countConnectedTerminals_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countConnectedTerminals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countConnectedTerminals_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countConnectedTerminals_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countConnectedTerminals_argsTupleScheme getScheme() {
        return new countConnectedTerminals_argsTupleScheme();
      }
    }

    private static class countConnectedTerminals_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countConnectedTerminals_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countConnectedTerminals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countConnectedTerminals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countConnectedTerminals_result implements org.apache.thrift.TBase<countConnectedTerminals_result, countConnectedTerminals_result._Fields>, java.io.Serializable, Cloneable, Comparable<countConnectedTerminals_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countConnectedTerminals_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countConnectedTerminals_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countConnectedTerminals_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countConnectedTerminals_result.class, metaDataMap);
    }

    public countConnectedTerminals_result() {
    }

    public countConnectedTerminals_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countConnectedTerminals_result(countConnectedTerminals_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countConnectedTerminals_result deepCopy() {
      return new countConnectedTerminals_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countConnectedTerminals_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countConnectedTerminals_result)
        return this.equals((countConnectedTerminals_result)that);
      return false;
    }

    public boolean equals(countConnectedTerminals_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(countConnectedTerminals_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countConnectedTerminals_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countConnectedTerminals_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countConnectedTerminals_resultStandardScheme getScheme() {
        return new countConnectedTerminals_resultStandardScheme();
      }
    }

    private static class countConnectedTerminals_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countConnectedTerminals_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countConnectedTerminals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countConnectedTerminals_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countConnectedTerminals_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countConnectedTerminals_resultTupleScheme getScheme() {
        return new countConnectedTerminals_resultTupleScheme();
      }
    }

    private static class countConnectedTerminals_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countConnectedTerminals_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countConnectedTerminals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countConnectedTerminals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendTextMessage_args implements org.apache.thrift.TBase<sendTextMessage_args, sendTextMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendTextMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTextMessage_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BROADCAST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("broadcastType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendTextMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendTextMessage_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType; // required
    public java.lang.String text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      /**
       * 
       * @see cn.udian.thriftservice.BroadcastType
       */
      BROADCAST_TYPE((short)2, "broadcastType"),
      TEXT((short)3, "text");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // BROADCAST_TYPE
            return BROADCAST_TYPE;
          case 3: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BROADCAST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("broadcastType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType.class)));
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTextMessage_args.class, metaDataMap);
    }

    public sendTextMessage_args() {
    }

    public sendTextMessage_args(
      java.lang.String busId,
      cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType,
      java.lang.String text)
    {
      this();
      this.busId = busId;
      this.broadcastType = broadcastType;
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTextMessage_args(sendTextMessage_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      if (other.isSetBroadcastType()) {
        this.broadcastType = other.broadcastType;
      }
      if (other.isSetText()) {
        this.text = other.text;
      }
    }

    public sendTextMessage_args deepCopy() {
      return new sendTextMessage_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      this.broadcastType = null;
      this.text = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public sendTextMessage_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType getBroadcastType() {
      return this.broadcastType;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType
     */
    public sendTextMessage_args setBroadcastType(cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType) {
      this.broadcastType = broadcastType;
      return this;
    }

    public void unsetBroadcastType() {
      this.broadcastType = null;
    }

    /** Returns true if field broadcastType is set (has been assigned a value) and false otherwise */
    public boolean isSetBroadcastType() {
      return this.broadcastType != null;
    }

    public void setBroadcastTypeIsSet(boolean value) {
      if (!value) {
        this.broadcastType = null;
      }
    }

    public java.lang.String getText() {
      return this.text;
    }

    public sendTextMessage_args setText(java.lang.String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case BROADCAST_TYPE:
        if (value == null) {
          unsetBroadcastType();
        } else {
          setBroadcastType((cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType)value);
        }
        break;

      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case BROADCAST_TYPE:
        return getBroadcastType();

      case TEXT:
        return getText();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case BROADCAST_TYPE:
        return isSetBroadcastType();
      case TEXT:
        return isSetText();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTextMessage_args)
        return this.equals((sendTextMessage_args)that);
      return false;
    }

    public boolean equals(sendTextMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_broadcastType = true && this.isSetBroadcastType();
      boolean that_present_broadcastType = true && that.isSetBroadcastType();
      if (this_present_broadcastType || that_present_broadcastType) {
        if (!(this_present_broadcastType && that_present_broadcastType))
          return false;
        if (!this.broadcastType.equals(that.broadcastType))
          return false;
      }

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isSetBroadcastType()) ? 131071 : 524287);
      if (isSetBroadcastType())
        hashCode = hashCode * 8191 + broadcastType.getValue();

      hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
      if (isSetText())
        hashCode = hashCode * 8191 + text.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendTextMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBroadcastType()).compareTo(other.isSetBroadcastType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBroadcastType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broadcastType, other.broadcastType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendTextMessage_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("broadcastType:");
      if (this.broadcastType == null) {
        sb.append("null");
      } else {
        sb.append(this.broadcastType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTextMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendTextMessage_argsStandardScheme getScheme() {
        return new sendTextMessage_argsStandardScheme();
      }
    }

    private static class sendTextMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendTextMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTextMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BROADCAST_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.broadcastType = cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType.findByValue(iprot.readI32());
                struct.setBroadcastTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTextMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        if (struct.broadcastType != null) {
          oprot.writeFieldBegin(BROADCAST_TYPE_FIELD_DESC);
          oprot.writeI32(struct.broadcastType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTextMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendTextMessage_argsTupleScheme getScheme() {
        return new sendTextMessage_argsTupleScheme();
      }
    }

    private static class sendTextMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendTextMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTextMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetBroadcastType()) {
          optionals.set(1);
        }
        if (struct.isSetText()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetBroadcastType()) {
          oprot.writeI32(struct.broadcastType.getValue());
        }
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTextMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.broadcastType = cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType.findByValue(iprot.readI32());
          struct.setBroadcastTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendTextMessage_result implements org.apache.thrift.TBase<sendTextMessage_result, sendTextMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendTextMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTextMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendTextMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendTextMessage_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTextMessage_result.class, metaDataMap);
    }

    public sendTextMessage_result() {
    }

    public sendTextMessage_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTextMessage_result(sendTextMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public sendTextMessage_result deepCopy() {
      return new sendTextMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public sendTextMessage_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTextMessage_result)
        return this.equals((sendTextMessage_result)that);
      return false;
    }

    public boolean equals(sendTextMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(sendTextMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendTextMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTextMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendTextMessage_resultStandardScheme getScheme() {
        return new sendTextMessage_resultStandardScheme();
      }
    }

    private static class sendTextMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendTextMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTextMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTextMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTextMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendTextMessage_resultTupleScheme getScheme() {
        return new sendTextMessage_resultTupleScheme();
      }
    }

    private static class sendTextMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendTextMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTextMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTextMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTerminalBasicInfo_args implements org.apache.thrift.TBase<queryTerminalBasicInfo_args, queryTerminalBasicInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTerminalBasicInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTerminalBasicInfo_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTerminalBasicInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTerminalBasicInfo_argsTupleSchemeFactory();

    public java.lang.String busId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTerminalBasicInfo_args.class, metaDataMap);
    }

    public queryTerminalBasicInfo_args() {
    }

    public queryTerminalBasicInfo_args(
      java.lang.String busId)
    {
      this();
      this.busId = busId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTerminalBasicInfo_args(queryTerminalBasicInfo_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
    }

    public queryTerminalBasicInfo_args deepCopy() {
      return new queryTerminalBasicInfo_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public queryTerminalBasicInfo_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTerminalBasicInfo_args)
        return this.equals((queryTerminalBasicInfo_args)that);
      return false;
    }

    public boolean equals(queryTerminalBasicInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTerminalBasicInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTerminalBasicInfo_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTerminalBasicInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalBasicInfo_argsStandardScheme getScheme() {
        return new queryTerminalBasicInfo_argsStandardScheme();
      }
    }

    private static class queryTerminalBasicInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTerminalBasicInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTerminalBasicInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTerminalBasicInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTerminalBasicInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalBasicInfo_argsTupleScheme getScheme() {
        return new queryTerminalBasicInfo_argsTupleScheme();
      }
    }

    private static class queryTerminalBasicInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTerminalBasicInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTerminalBasicInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTerminalBasicInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTerminalBasicInfo_result implements org.apache.thrift.TBase<queryTerminalBasicInfo_result, queryTerminalBasicInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTerminalBasicInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTerminalBasicInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTerminalBasicInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTerminalBasicInfo_resultTupleSchemeFactory();

    public cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTerminalBasicInfo_result.class, metaDataMap);
    }

    public queryTerminalBasicInfo_result() {
    }

    public queryTerminalBasicInfo_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTerminalBasicInfo_result(queryTerminalBasicInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo(other.success);
      }
    }

    public queryTerminalBasicInfo_result deepCopy() {
      return new queryTerminalBasicInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo getSuccess() {
      return this.success;
    }

    public queryTerminalBasicInfo_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTerminalBasicInfo_result)
        return this.equals((queryTerminalBasicInfo_result)that);
      return false;
    }

    public boolean equals(queryTerminalBasicInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTerminalBasicInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTerminalBasicInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTerminalBasicInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalBasicInfo_resultStandardScheme getScheme() {
        return new queryTerminalBasicInfo_resultStandardScheme();
      }
    }

    private static class queryTerminalBasicInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTerminalBasicInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTerminalBasicInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTerminalBasicInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTerminalBasicInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalBasicInfo_resultTupleScheme getScheme() {
        return new queryTerminalBasicInfo_resultTupleScheme();
      }
    }

    private static class queryTerminalBasicInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTerminalBasicInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTerminalBasicInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTerminalBasicInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new cn.udian.communicationprotocol.szstandard.thriftservice.TerminalBasicInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalOperatingMode_args implements org.apache.thrift.TBase<setTerminalOperatingMode_args, setTerminalOperatingMode_args._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalOperatingMode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalOperatingMode_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BROADCAST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("broadcastType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OPERATING_DETAIL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operatingDetailType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalOperatingMode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalOperatingMode_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType; // required
    public java.lang.String text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      /**
       * 
       * @see cn.udian.thriftservice.BroadcastType
       */
      BROADCAST_TYPE((short)2, "broadcastType"),
      /**
       * 
       * @see cn.udian.thriftservice.OperatingDetailType
       */
      OPERATING_DETAIL_TYPE((short)3, "operatingDetailType"),
      TEXT((short)4, "text");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // BROADCAST_TYPE
            return BROADCAST_TYPE;
          case 3: // OPERATING_DETAIL_TYPE
            return OPERATING_DETAIL_TYPE;
          case 4: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BROADCAST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("broadcastType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType.class)));
      tmpMap.put(_Fields.OPERATING_DETAIL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operatingDetailType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType.class)));
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalOperatingMode_args.class, metaDataMap);
    }

    public setTerminalOperatingMode_args() {
    }

    public setTerminalOperatingMode_args(
      java.lang.String busId,
      cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType,
      cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType,
      java.lang.String text)
    {
      this();
      this.busId = busId;
      this.broadcastType = broadcastType;
      this.operatingDetailType = operatingDetailType;
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalOperatingMode_args(setTerminalOperatingMode_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      if (other.isSetBroadcastType()) {
        this.broadcastType = other.broadcastType;
      }
      if (other.isSetOperatingDetailType()) {
        this.operatingDetailType = other.operatingDetailType;
      }
      if (other.isSetText()) {
        this.text = other.text;
      }
    }

    public setTerminalOperatingMode_args deepCopy() {
      return new setTerminalOperatingMode_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      this.broadcastType = null;
      this.operatingDetailType = null;
      this.text = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public setTerminalOperatingMode_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType getBroadcastType() {
      return this.broadcastType;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType
     */
    public setTerminalOperatingMode_args setBroadcastType(cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType broadcastType) {
      this.broadcastType = broadcastType;
      return this;
    }

    public void unsetBroadcastType() {
      this.broadcastType = null;
    }

    /** Returns true if field broadcastType is set (has been assigned a value) and false otherwise */
    public boolean isSetBroadcastType() {
      return this.broadcastType != null;
    }

    public void setBroadcastTypeIsSet(boolean value) {
      if (!value) {
        this.broadcastType = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType getOperatingDetailType() {
      return this.operatingDetailType;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType
     */
    public setTerminalOperatingMode_args setOperatingDetailType(cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType operatingDetailType) {
      this.operatingDetailType = operatingDetailType;
      return this;
    }

    public void unsetOperatingDetailType() {
      this.operatingDetailType = null;
    }

    /** Returns true if field operatingDetailType is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatingDetailType() {
      return this.operatingDetailType != null;
    }

    public void setOperatingDetailTypeIsSet(boolean value) {
      if (!value) {
        this.operatingDetailType = null;
      }
    }

    public java.lang.String getText() {
      return this.text;
    }

    public setTerminalOperatingMode_args setText(java.lang.String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case BROADCAST_TYPE:
        if (value == null) {
          unsetBroadcastType();
        } else {
          setBroadcastType((cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType)value);
        }
        break;

      case OPERATING_DETAIL_TYPE:
        if (value == null) {
          unsetOperatingDetailType();
        } else {
          setOperatingDetailType((cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType)value);
        }
        break;

      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case BROADCAST_TYPE:
        return getBroadcastType();

      case OPERATING_DETAIL_TYPE:
        return getOperatingDetailType();

      case TEXT:
        return getText();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case BROADCAST_TYPE:
        return isSetBroadcastType();
      case OPERATING_DETAIL_TYPE:
        return isSetOperatingDetailType();
      case TEXT:
        return isSetText();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalOperatingMode_args)
        return this.equals((setTerminalOperatingMode_args)that);
      return false;
    }

    public boolean equals(setTerminalOperatingMode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_broadcastType = true && this.isSetBroadcastType();
      boolean that_present_broadcastType = true && that.isSetBroadcastType();
      if (this_present_broadcastType || that_present_broadcastType) {
        if (!(this_present_broadcastType && that_present_broadcastType))
          return false;
        if (!this.broadcastType.equals(that.broadcastType))
          return false;
      }

      boolean this_present_operatingDetailType = true && this.isSetOperatingDetailType();
      boolean that_present_operatingDetailType = true && that.isSetOperatingDetailType();
      if (this_present_operatingDetailType || that_present_operatingDetailType) {
        if (!(this_present_operatingDetailType && that_present_operatingDetailType))
          return false;
        if (!this.operatingDetailType.equals(that.operatingDetailType))
          return false;
      }

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isSetBroadcastType()) ? 131071 : 524287);
      if (isSetBroadcastType())
        hashCode = hashCode * 8191 + broadcastType.getValue();

      hashCode = hashCode * 8191 + ((isSetOperatingDetailType()) ? 131071 : 524287);
      if (isSetOperatingDetailType())
        hashCode = hashCode * 8191 + operatingDetailType.getValue();

      hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
      if (isSetText())
        hashCode = hashCode * 8191 + text.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalOperatingMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBroadcastType()).compareTo(other.isSetBroadcastType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBroadcastType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broadcastType, other.broadcastType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOperatingDetailType()).compareTo(other.isSetOperatingDetailType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatingDetailType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatingDetailType, other.operatingDetailType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalOperatingMode_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("broadcastType:");
      if (this.broadcastType == null) {
        sb.append("null");
      } else {
        sb.append(this.broadcastType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatingDetailType:");
      if (this.operatingDetailType == null) {
        sb.append("null");
      } else {
        sb.append(this.operatingDetailType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalOperatingMode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingMode_argsStandardScheme getScheme() {
        return new setTerminalOperatingMode_argsStandardScheme();
      }
    }

    private static class setTerminalOperatingMode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalOperatingMode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalOperatingMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BROADCAST_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.broadcastType = cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType.findByValue(iprot.readI32());
                struct.setBroadcastTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPERATING_DETAIL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.operatingDetailType = cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType.findByValue(iprot.readI32());
                struct.setOperatingDetailTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalOperatingMode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        if (struct.broadcastType != null) {
          oprot.writeFieldBegin(BROADCAST_TYPE_FIELD_DESC);
          oprot.writeI32(struct.broadcastType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.operatingDetailType != null) {
          oprot.writeFieldBegin(OPERATING_DETAIL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.operatingDetailType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalOperatingMode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingMode_argsTupleScheme getScheme() {
        return new setTerminalOperatingMode_argsTupleScheme();
      }
    }

    private static class setTerminalOperatingMode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalOperatingMode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetBroadcastType()) {
          optionals.set(1);
        }
        if (struct.isSetOperatingDetailType()) {
          optionals.set(2);
        }
        if (struct.isSetText()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetBroadcastType()) {
          oprot.writeI32(struct.broadcastType.getValue());
        }
        if (struct.isSetOperatingDetailType()) {
          oprot.writeI32(struct.operatingDetailType.getValue());
        }
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingMode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.broadcastType = cn.udian.communicationprotocol.szstandard.thriftservice.BroadcastType.findByValue(iprot.readI32());
          struct.setBroadcastTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.operatingDetailType = cn.udian.communicationprotocol.szstandard.thriftservice.OperatingDetailType.findByValue(iprot.readI32());
          struct.setOperatingDetailTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalOperatingMode_result implements org.apache.thrift.TBase<setTerminalOperatingMode_result, setTerminalOperatingMode_result._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalOperatingMode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalOperatingMode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalOperatingMode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalOperatingMode_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalOperatingMode_result.class, metaDataMap);
    }

    public setTerminalOperatingMode_result() {
    }

    public setTerminalOperatingMode_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalOperatingMode_result(setTerminalOperatingMode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setTerminalOperatingMode_result deepCopy() {
      return new setTerminalOperatingMode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public setTerminalOperatingMode_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalOperatingMode_result)
        return this.equals((setTerminalOperatingMode_result)that);
      return false;
    }

    public boolean equals(setTerminalOperatingMode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalOperatingMode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalOperatingMode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalOperatingMode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingMode_resultStandardScheme getScheme() {
        return new setTerminalOperatingMode_resultStandardScheme();
      }
    }

    private static class setTerminalOperatingMode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalOperatingMode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalOperatingMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalOperatingMode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalOperatingMode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingMode_resultTupleScheme getScheme() {
        return new setTerminalOperatingMode_resultTupleScheme();
      }
    }

    private static class setTerminalOperatingMode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalOperatingMode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingMode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTerminalStoredLines_args implements org.apache.thrift.TBase<queryTerminalStoredLines_args, queryTerminalStoredLines_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTerminalStoredLines_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTerminalStoredLines_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTerminalStoredLines_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTerminalStoredLines_argsTupleSchemeFactory();

    public java.lang.String busId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTerminalStoredLines_args.class, metaDataMap);
    }

    public queryTerminalStoredLines_args() {
    }

    public queryTerminalStoredLines_args(
      java.lang.String busId)
    {
      this();
      this.busId = busId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTerminalStoredLines_args(queryTerminalStoredLines_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
    }

    public queryTerminalStoredLines_args deepCopy() {
      return new queryTerminalStoredLines_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public queryTerminalStoredLines_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTerminalStoredLines_args)
        return this.equals((queryTerminalStoredLines_args)that);
      return false;
    }

    public boolean equals(queryTerminalStoredLines_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTerminalStoredLines_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTerminalStoredLines_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTerminalStoredLines_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalStoredLines_argsStandardScheme getScheme() {
        return new queryTerminalStoredLines_argsStandardScheme();
      }
    }

    private static class queryTerminalStoredLines_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTerminalStoredLines_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTerminalStoredLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTerminalStoredLines_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTerminalStoredLines_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalStoredLines_argsTupleScheme getScheme() {
        return new queryTerminalStoredLines_argsTupleScheme();
      }
    }

    private static class queryTerminalStoredLines_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTerminalStoredLines_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTerminalStoredLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTerminalStoredLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTerminalStoredLines_result implements org.apache.thrift.TBase<queryTerminalStoredLines_result, queryTerminalStoredLines_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTerminalStoredLines_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTerminalStoredLines_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTerminalStoredLines_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTerminalStoredLines_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTerminalStoredLines_result.class, metaDataMap);
    }

    public queryTerminalStoredLines_result() {
    }

    public queryTerminalStoredLines_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTerminalStoredLines_result(queryTerminalStoredLines_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public queryTerminalStoredLines_result deepCopy() {
      return new queryTerminalStoredLines_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public queryTerminalStoredLines_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTerminalStoredLines_result)
        return this.equals((queryTerminalStoredLines_result)that);
      return false;
    }

    public boolean equals(queryTerminalStoredLines_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTerminalStoredLines_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTerminalStoredLines_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTerminalStoredLines_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalStoredLines_resultStandardScheme getScheme() {
        return new queryTerminalStoredLines_resultStandardScheme();
      }
    }

    private static class queryTerminalStoredLines_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTerminalStoredLines_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTerminalStoredLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTerminalStoredLines_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTerminalStoredLines_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTerminalStoredLines_resultTupleScheme getScheme() {
        return new queryTerminalStoredLines_resultTupleScheme();
      }
    }

    private static class queryTerminalStoredLines_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTerminalStoredLines_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTerminalStoredLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTerminalStoredLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalOperatingLine_args implements org.apache.thrift.TBase<setTerminalOperatingLine_args, setTerminalOperatingLine_args._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalOperatingLine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalOperatingLine_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OLD_LINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLineId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NEWLINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newlineId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalOperatingLine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalOperatingLine_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    public java.lang.String oldLineId; // required
    public java.lang.String newlineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      OLD_LINE_ID((short)2, "oldLineId"),
      NEWLINE_ID((short)3, "newlineId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // OLD_LINE_ID
            return OLD_LINE_ID;
          case 3: // NEWLINE_ID
            return NEWLINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_LINE_ID, new org.apache.thrift.meta_data.FieldMetaData("oldLineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEWLINE_ID, new org.apache.thrift.meta_data.FieldMetaData("newlineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalOperatingLine_args.class, metaDataMap);
    }

    public setTerminalOperatingLine_args() {
    }

    public setTerminalOperatingLine_args(
      java.lang.String busId,
      java.lang.String oldLineId,
      java.lang.String newlineId)
    {
      this();
      this.busId = busId;
      this.oldLineId = oldLineId;
      this.newlineId = newlineId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalOperatingLine_args(setTerminalOperatingLine_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      if (other.isSetOldLineId()) {
        this.oldLineId = other.oldLineId;
      }
      if (other.isSetNewlineId()) {
        this.newlineId = other.newlineId;
      }
    }

    public setTerminalOperatingLine_args deepCopy() {
      return new setTerminalOperatingLine_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      this.oldLineId = null;
      this.newlineId = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public setTerminalOperatingLine_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    public java.lang.String getOldLineId() {
      return this.oldLineId;
    }

    public setTerminalOperatingLine_args setOldLineId(java.lang.String oldLineId) {
      this.oldLineId = oldLineId;
      return this;
    }

    public void unsetOldLineId() {
      this.oldLineId = null;
    }

    /** Returns true if field oldLineId is set (has been assigned a value) and false otherwise */
    public boolean isSetOldLineId() {
      return this.oldLineId != null;
    }

    public void setOldLineIdIsSet(boolean value) {
      if (!value) {
        this.oldLineId = null;
      }
    }

    public java.lang.String getNewlineId() {
      return this.newlineId;
    }

    public setTerminalOperatingLine_args setNewlineId(java.lang.String newlineId) {
      this.newlineId = newlineId;
      return this;
    }

    public void unsetNewlineId() {
      this.newlineId = null;
    }

    /** Returns true if field newlineId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewlineId() {
      return this.newlineId != null;
    }

    public void setNewlineIdIsSet(boolean value) {
      if (!value) {
        this.newlineId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case OLD_LINE_ID:
        if (value == null) {
          unsetOldLineId();
        } else {
          setOldLineId((java.lang.String)value);
        }
        break;

      case NEWLINE_ID:
        if (value == null) {
          unsetNewlineId();
        } else {
          setNewlineId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case OLD_LINE_ID:
        return getOldLineId();

      case NEWLINE_ID:
        return getNewlineId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case OLD_LINE_ID:
        return isSetOldLineId();
      case NEWLINE_ID:
        return isSetNewlineId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalOperatingLine_args)
        return this.equals((setTerminalOperatingLine_args)that);
      return false;
    }

    public boolean equals(setTerminalOperatingLine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_oldLineId = true && this.isSetOldLineId();
      boolean that_present_oldLineId = true && that.isSetOldLineId();
      if (this_present_oldLineId || that_present_oldLineId) {
        if (!(this_present_oldLineId && that_present_oldLineId))
          return false;
        if (!this.oldLineId.equals(that.oldLineId))
          return false;
      }

      boolean this_present_newlineId = true && this.isSetNewlineId();
      boolean that_present_newlineId = true && that.isSetNewlineId();
      if (this_present_newlineId || that_present_newlineId) {
        if (!(this_present_newlineId && that_present_newlineId))
          return false;
        if (!this.newlineId.equals(that.newlineId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isSetOldLineId()) ? 131071 : 524287);
      if (isSetOldLineId())
        hashCode = hashCode * 8191 + oldLineId.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewlineId()) ? 131071 : 524287);
      if (isSetNewlineId())
        hashCode = hashCode * 8191 + newlineId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalOperatingLine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOldLineId()).compareTo(other.isSetOldLineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldLineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLineId, other.oldLineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewlineId()).compareTo(other.isSetNewlineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewlineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newlineId, other.newlineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalOperatingLine_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldLineId:");
      if (this.oldLineId == null) {
        sb.append("null");
      } else {
        sb.append(this.oldLineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newlineId:");
      if (this.newlineId == null) {
        sb.append("null");
      } else {
        sb.append(this.newlineId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalOperatingLine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingLine_argsStandardScheme getScheme() {
        return new setTerminalOperatingLine_argsStandardScheme();
      }
    }

    private static class setTerminalOperatingLine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalOperatingLine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalOperatingLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OLD_LINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldLineId = iprot.readString();
                struct.setOldLineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEWLINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newlineId = iprot.readString();
                struct.setNewlineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalOperatingLine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        if (struct.oldLineId != null) {
          oprot.writeFieldBegin(OLD_LINE_ID_FIELD_DESC);
          oprot.writeString(struct.oldLineId);
          oprot.writeFieldEnd();
        }
        if (struct.newlineId != null) {
          oprot.writeFieldBegin(NEWLINE_ID_FIELD_DESC);
          oprot.writeString(struct.newlineId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalOperatingLine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingLine_argsTupleScheme getScheme() {
        return new setTerminalOperatingLine_argsTupleScheme();
      }
    }

    private static class setTerminalOperatingLine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalOperatingLine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetOldLineId()) {
          optionals.set(1);
        }
        if (struct.isSetNewlineId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetOldLineId()) {
          oprot.writeString(struct.oldLineId);
        }
        if (struct.isSetNewlineId()) {
          oprot.writeString(struct.newlineId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oldLineId = iprot.readString();
          struct.setOldLineIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newlineId = iprot.readString();
          struct.setNewlineIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalOperatingLine_result implements org.apache.thrift.TBase<setTerminalOperatingLine_result, setTerminalOperatingLine_result._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalOperatingLine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalOperatingLine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalOperatingLine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalOperatingLine_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalOperatingLine_result.class, metaDataMap);
    }

    public setTerminalOperatingLine_result() {
    }

    public setTerminalOperatingLine_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalOperatingLine_result(setTerminalOperatingLine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setTerminalOperatingLine_result deepCopy() {
      return new setTerminalOperatingLine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public setTerminalOperatingLine_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalOperatingLine_result)
        return this.equals((setTerminalOperatingLine_result)that);
      return false;
    }

    public boolean equals(setTerminalOperatingLine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalOperatingLine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalOperatingLine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalOperatingLine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingLine_resultStandardScheme getScheme() {
        return new setTerminalOperatingLine_resultStandardScheme();
      }
    }

    private static class setTerminalOperatingLine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalOperatingLine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalOperatingLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalOperatingLine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalOperatingLine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalOperatingLine_resultTupleScheme getScheme() {
        return new setTerminalOperatingLine_resultTupleScheme();
      }
    }

    private static class setTerminalOperatingLine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalOperatingLine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalOperatingLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rebootTerminal_args implements org.apache.thrift.TBase<rebootTerminal_args, rebootTerminal_args._Fields>, java.io.Serializable, Cloneable, Comparable<rebootTerminal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rebootTerminal_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rebootTerminal_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rebootTerminal_argsTupleSchemeFactory();

    public java.lang.String busId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rebootTerminal_args.class, metaDataMap);
    }

    public rebootTerminal_args() {
    }

    public rebootTerminal_args(
      java.lang.String busId)
    {
      this();
      this.busId = busId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rebootTerminal_args(rebootTerminal_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
    }

    public rebootTerminal_args deepCopy() {
      return new rebootTerminal_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public rebootTerminal_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rebootTerminal_args)
        return this.equals((rebootTerminal_args)that);
      return false;
    }

    public boolean equals(rebootTerminal_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rebootTerminal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rebootTerminal_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rebootTerminal_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rebootTerminal_argsStandardScheme getScheme() {
        return new rebootTerminal_argsStandardScheme();
      }
    }

    private static class rebootTerminal_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rebootTerminal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rebootTerminal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rebootTerminal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rebootTerminal_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rebootTerminal_argsTupleScheme getScheme() {
        return new rebootTerminal_argsTupleScheme();
      }
    }

    private static class rebootTerminal_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rebootTerminal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rebootTerminal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rebootTerminal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rebootTerminal_result implements org.apache.thrift.TBase<rebootTerminal_result, rebootTerminal_result._Fields>, java.io.Serializable, Cloneable, Comparable<rebootTerminal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rebootTerminal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rebootTerminal_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rebootTerminal_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rebootTerminal_result.class, metaDataMap);
    }

    public rebootTerminal_result() {
    }

    public rebootTerminal_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rebootTerminal_result(rebootTerminal_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public rebootTerminal_result deepCopy() {
      return new rebootTerminal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public rebootTerminal_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rebootTerminal_result)
        return this.equals((rebootTerminal_result)that);
      return false;
    }

    public boolean equals(rebootTerminal_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(rebootTerminal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rebootTerminal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rebootTerminal_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rebootTerminal_resultStandardScheme getScheme() {
        return new rebootTerminal_resultStandardScheme();
      }
    }

    private static class rebootTerminal_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rebootTerminal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rebootTerminal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rebootTerminal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rebootTerminal_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rebootTerminal_resultTupleScheme getScheme() {
        return new rebootTerminal_resultTupleScheme();
      }
    }

    private static class rebootTerminal_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rebootTerminal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rebootTerminal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rebootTerminal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendDriverReportResp_args implements org.apache.thrift.TBase<sendDriverReportResp_args, sendDriverReportResp_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendDriverReportResp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendDriverReportResp_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQ_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("reqCode", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RESP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("respCode", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendDriverReportResp_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendDriverReportResp_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode; // required
    public int respCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      /**
       * 
       * @see cn.udian.thriftservice.DriverReportType
       */
      REQ_CODE((short)2, "reqCode"),
      RESP_CODE((short)3, "respCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // REQ_CODE
            return REQ_CODE;
          case 3: // RESP_CODE
            return RESP_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RESPCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQ_CODE, new org.apache.thrift.meta_data.FieldMetaData("reqCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType.class)));
      tmpMap.put(_Fields.RESP_CODE, new org.apache.thrift.meta_data.FieldMetaData("respCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendDriverReportResp_args.class, metaDataMap);
    }

    public sendDriverReportResp_args() {
    }

    public sendDriverReportResp_args(
      java.lang.String busId,
      cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode,
      int respCode)
    {
      this();
      this.busId = busId;
      this.reqCode = reqCode;
      this.respCode = respCode;
      setRespCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDriverReportResp_args(sendDriverReportResp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      if (other.isSetReqCode()) {
        this.reqCode = other.reqCode;
      }
      this.respCode = other.respCode;
    }

    public sendDriverReportResp_args deepCopy() {
      return new sendDriverReportResp_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      this.reqCode = null;
      setRespCodeIsSet(false);
      this.respCode = 0;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public sendDriverReportResp_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType getReqCode() {
      return this.reqCode;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType
     */
    public sendDriverReportResp_args setReqCode(cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType reqCode) {
      this.reqCode = reqCode;
      return this;
    }

    public void unsetReqCode() {
      this.reqCode = null;
    }

    /** Returns true if field reqCode is set (has been assigned a value) and false otherwise */
    public boolean isSetReqCode() {
      return this.reqCode != null;
    }

    public void setReqCodeIsSet(boolean value) {
      if (!value) {
        this.reqCode = null;
      }
    }

    public int getRespCode() {
      return this.respCode;
    }

    public sendDriverReportResp_args setRespCode(int respCode) {
      this.respCode = respCode;
      setRespCodeIsSet(true);
      return this;
    }

    public void unsetRespCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPCODE_ISSET_ID);
    }

    /** Returns true if field respCode is set (has been assigned a value) and false otherwise */
    public boolean isSetRespCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPCODE_ISSET_ID);
    }

    public void setRespCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case REQ_CODE:
        if (value == null) {
          unsetReqCode();
        } else {
          setReqCode((cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType)value);
        }
        break;

      case RESP_CODE:
        if (value == null) {
          unsetRespCode();
        } else {
          setRespCode((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case REQ_CODE:
        return getReqCode();

      case RESP_CODE:
        return getRespCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case REQ_CODE:
        return isSetReqCode();
      case RESP_CODE:
        return isSetRespCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDriverReportResp_args)
        return this.equals((sendDriverReportResp_args)that);
      return false;
    }

    public boolean equals(sendDriverReportResp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_reqCode = true && this.isSetReqCode();
      boolean that_present_reqCode = true && that.isSetReqCode();
      if (this_present_reqCode || that_present_reqCode) {
        if (!(this_present_reqCode && that_present_reqCode))
          return false;
        if (!this.reqCode.equals(that.reqCode))
          return false;
      }

      boolean this_present_respCode = true;
      boolean that_present_respCode = true;
      if (this_present_respCode || that_present_respCode) {
        if (!(this_present_respCode && that_present_respCode))
          return false;
        if (this.respCode != that.respCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isSetReqCode()) ? 131071 : 524287);
      if (isSetReqCode())
        hashCode = hashCode * 8191 + reqCode.getValue();

      hashCode = hashCode * 8191 + respCode;

      return hashCode;
    }

    @Override
    public int compareTo(sendDriverReportResp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqCode()).compareTo(other.isSetReqCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqCode, other.reqCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRespCode()).compareTo(other.isSetRespCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRespCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respCode, other.respCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendDriverReportResp_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqCode:");
      if (this.reqCode == null) {
        sb.append("null");
      } else {
        sb.append(this.reqCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("respCode:");
      sb.append(this.respCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendDriverReportResp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDriverReportResp_argsStandardScheme getScheme() {
        return new sendDriverReportResp_argsStandardScheme();
      }
    }

    private static class sendDriverReportResp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendDriverReportResp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendDriverReportResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQ_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reqCode = cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType.findByValue(iprot.readI32());
                struct.setReqCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESP_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.respCode = iprot.readI32();
                struct.setRespCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendDriverReportResp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        if (struct.reqCode != null) {
          oprot.writeFieldBegin(REQ_CODE_FIELD_DESC);
          oprot.writeI32(struct.reqCode.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RESP_CODE_FIELD_DESC);
        oprot.writeI32(struct.respCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendDriverReportResp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDriverReportResp_argsTupleScheme getScheme() {
        return new sendDriverReportResp_argsTupleScheme();
      }
    }

    private static class sendDriverReportResp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendDriverReportResp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendDriverReportResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetReqCode()) {
          optionals.set(1);
        }
        if (struct.isSetRespCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetReqCode()) {
          oprot.writeI32(struct.reqCode.getValue());
        }
        if (struct.isSetRespCode()) {
          oprot.writeI32(struct.respCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendDriverReportResp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.reqCode = cn.udian.communicationprotocol.szstandard.thriftservice.DriverReportType.findByValue(iprot.readI32());
          struct.setReqCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.respCode = iprot.readI32();
          struct.setRespCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendDriverReportResp_result implements org.apache.thrift.TBase<sendDriverReportResp_result, sendDriverReportResp_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendDriverReportResp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendDriverReportResp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendDriverReportResp_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendDriverReportResp_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendDriverReportResp_result.class, metaDataMap);
    }

    public sendDriverReportResp_result() {
    }

    public sendDriverReportResp_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDriverReportResp_result(sendDriverReportResp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public sendDriverReportResp_result deepCopy() {
      return new sendDriverReportResp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public sendDriverReportResp_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDriverReportResp_result)
        return this.equals((sendDriverReportResp_result)that);
      return false;
    }

    public boolean equals(sendDriverReportResp_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(sendDriverReportResp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendDriverReportResp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendDriverReportResp_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDriverReportResp_resultStandardScheme getScheme() {
        return new sendDriverReportResp_resultStandardScheme();
      }
    }

    private static class sendDriverReportResp_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendDriverReportResp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendDriverReportResp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendDriverReportResp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendDriverReportResp_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendDriverReportResp_resultTupleScheme getScheme() {
        return new sendDriverReportResp_resultTupleScheme();
      }
    }

    private static class sendDriverReportResp_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendDriverReportResp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendDriverReportResp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendDriverReportResp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fileDownload_args implements org.apache.thrift.TBase<fileDownload_args, fileDownload_args._Fields>, java.io.Serializable, Cloneable, Comparable<fileDownload_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileDownload_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIp", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileDownload_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileDownload_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.FileType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType; // required
    public java.lang.String serverIp; // required
    public int serverPort; // required
    public java.lang.String userName; // required
    public java.lang.String password; // required
    public java.lang.String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      /**
       * 
       * @see cn.udian.thriftservice.FileType
       */
      FILE_TYPE((short)2, "fileType"),
      SERVER_IP((short)3, "serverIp"),
      SERVER_PORT((short)4, "serverPort"),
      USER_NAME((short)5, "userName"),
      PASSWORD((short)6, "password"),
      PATH((short)7, "path");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // FILE_TYPE
            return FILE_TYPE;
          case 3: // SERVER_IP
            return SERVER_IP;
          case 4: // SERVER_PORT
            return SERVER_PORT;
          case 5: // USER_NAME
            return USER_NAME;
          case 6: // PASSWORD
            return PASSWORD;
          case 7: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERPORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.FileType.class)));
      tmpMap.put(_Fields.SERVER_IP, new org.apache.thrift.meta_data.FieldMetaData("serverIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileDownload_args.class, metaDataMap);
    }

    public fileDownload_args() {
    }

    public fileDownload_args(
      java.lang.String busId,
      cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType,
      java.lang.String serverIp,
      int serverPort,
      java.lang.String userName,
      java.lang.String password,
      java.lang.String path)
    {
      this();
      this.busId = busId;
      this.fileType = fileType;
      this.serverIp = serverIp;
      this.serverPort = serverPort;
      setServerPortIsSet(true);
      this.userName = userName;
      this.password = password;
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileDownload_args(fileDownload_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      if (other.isSetFileType()) {
        this.fileType = other.fileType;
      }
      if (other.isSetServerIp()) {
        this.serverIp = other.serverIp;
      }
      this.serverPort = other.serverPort;
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public fileDownload_args deepCopy() {
      return new fileDownload_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      this.fileType = null;
      this.serverIp = null;
      setServerPortIsSet(false);
      this.serverPort = 0;
      this.userName = null;
      this.password = null;
      this.path = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public fileDownload_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.FileType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.FileType getFileType() {
      return this.fileType;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.FileType
     */
    public fileDownload_args setFileType(cn.udian.communicationprotocol.szstandard.thriftservice.FileType fileType) {
      this.fileType = fileType;
      return this;
    }

    public void unsetFileType() {
      this.fileType = null;
    }

    /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
    public boolean isSetFileType() {
      return this.fileType != null;
    }

    public void setFileTypeIsSet(boolean value) {
      if (!value) {
        this.fileType = null;
      }
    }

    public java.lang.String getServerIp() {
      return this.serverIp;
    }

    public fileDownload_args setServerIp(java.lang.String serverIp) {
      this.serverIp = serverIp;
      return this;
    }

    public void unsetServerIp() {
      this.serverIp = null;
    }

    /** Returns true if field serverIp is set (has been assigned a value) and false otherwise */
    public boolean isSetServerIp() {
      return this.serverIp != null;
    }

    public void setServerIpIsSet(boolean value) {
      if (!value) {
        this.serverIp = null;
      }
    }

    public int getServerPort() {
      return this.serverPort;
    }

    public fileDownload_args setServerPort(int serverPort) {
      this.serverPort = serverPort;
      setServerPortIsSet(true);
      return this;
    }

    public void unsetServerPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
    }

    /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
    public boolean isSetServerPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
    }

    public void setServerPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERPORT_ISSET_ID, value);
    }

    public java.lang.String getUserName() {
      return this.userName;
    }

    public fileDownload_args setUserName(java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public fileDownload_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getPath() {
      return this.path;
    }

    public fileDownload_args setPath(java.lang.String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case FILE_TYPE:
        if (value == null) {
          unsetFileType();
        } else {
          setFileType((cn.udian.communicationprotocol.szstandard.thriftservice.FileType)value);
        }
        break;

      case SERVER_IP:
        if (value == null) {
          unsetServerIp();
        } else {
          setServerIp((java.lang.String)value);
        }
        break;

      case SERVER_PORT:
        if (value == null) {
          unsetServerPort();
        } else {
          setServerPort((java.lang.Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case FILE_TYPE:
        return getFileType();

      case SERVER_IP:
        return getServerIp();

      case SERVER_PORT:
        return getServerPort();

      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      case PATH:
        return getPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case FILE_TYPE:
        return isSetFileType();
      case SERVER_IP:
        return isSetServerIp();
      case SERVER_PORT:
        return isSetServerPort();
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      case PATH:
        return isSetPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fileDownload_args)
        return this.equals((fileDownload_args)that);
      return false;
    }

    public boolean equals(fileDownload_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_fileType = true && this.isSetFileType();
      boolean that_present_fileType = true && that.isSetFileType();
      if (this_present_fileType || that_present_fileType) {
        if (!(this_present_fileType && that_present_fileType))
          return false;
        if (!this.fileType.equals(that.fileType))
          return false;
      }

      boolean this_present_serverIp = true && this.isSetServerIp();
      boolean that_present_serverIp = true && that.isSetServerIp();
      if (this_present_serverIp || that_present_serverIp) {
        if (!(this_present_serverIp && that_present_serverIp))
          return false;
        if (!this.serverIp.equals(that.serverIp))
          return false;
      }

      boolean this_present_serverPort = true;
      boolean that_present_serverPort = true;
      if (this_present_serverPort || that_present_serverPort) {
        if (!(this_present_serverPort && that_present_serverPort))
          return false;
        if (this.serverPort != that.serverPort)
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
      if (isSetFileType())
        hashCode = hashCode * 8191 + fileType.getValue();

      hashCode = hashCode * 8191 + ((isSetServerIp()) ? 131071 : 524287);
      if (isSetServerIp())
        hashCode = hashCode * 8191 + serverIp.hashCode();

      hashCode = hashCode * 8191 + serverPort;

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + path.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fileDownload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServerIp()).compareTo(other.isSetServerIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIp, other.serverIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServerPort()).compareTo(other.isSetServerPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, other.serverPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileDownload_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileType:");
      if (this.fileType == null) {
        sb.append("null");
      } else {
        sb.append(this.fileType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverIp:");
      if (this.serverIp == null) {
        sb.append("null");
      } else {
        sb.append(this.serverIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverPort:");
      sb.append(this.serverPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileDownload_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileDownload_argsStandardScheme getScheme() {
        return new fileDownload_argsStandardScheme();
      }
    }

    private static class fileDownload_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileDownload_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileDownload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileType = cn.udian.communicationprotocol.szstandard.thriftservice.FileType.findByValue(iprot.readI32());
                struct.setFileTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverIp = iprot.readString();
                struct.setServerIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SERVER_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverPort = iprot.readI32();
                struct.setServerPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileDownload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        if (struct.fileType != null) {
          oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.fileType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.serverIp != null) {
          oprot.writeFieldBegin(SERVER_IP_FIELD_DESC);
          oprot.writeString(struct.serverIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
        oprot.writeI32(struct.serverPort);
        oprot.writeFieldEnd();
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileDownload_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileDownload_argsTupleScheme getScheme() {
        return new fileDownload_argsTupleScheme();
      }
    }

    private static class fileDownload_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileDownload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileDownload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetFileType()) {
          optionals.set(1);
        }
        if (struct.isSetServerIp()) {
          optionals.set(2);
        }
        if (struct.isSetServerPort()) {
          optionals.set(3);
        }
        if (struct.isSetUserName()) {
          optionals.set(4);
        }
        if (struct.isSetPassword()) {
          optionals.set(5);
        }
        if (struct.isSetPath()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetFileType()) {
          oprot.writeI32(struct.fileType.getValue());
        }
        if (struct.isSetServerIp()) {
          oprot.writeString(struct.serverIp);
        }
        if (struct.isSetServerPort()) {
          oprot.writeI32(struct.serverPort);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileDownload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileType = cn.udian.communicationprotocol.szstandard.thriftservice.FileType.findByValue(iprot.readI32());
          struct.setFileTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serverIp = iprot.readString();
          struct.setServerIpIsSet(true);
        }
        if (incoming.get(3)) {
          struct.serverPort = iprot.readI32();
          struct.setServerPortIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(6)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fileDownload_result implements org.apache.thrift.TBase<fileDownload_result, fileDownload_result._Fields>, java.io.Serializable, Cloneable, Comparable<fileDownload_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileDownload_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileDownload_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileDownload_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.FileDownloadResponseType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileDownload_result.class, metaDataMap);
    }

    public fileDownload_result() {
    }

    public fileDownload_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileDownload_result(fileDownload_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public fileDownload_result deepCopy() {
      return new fileDownload_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType
     */
    public fileDownload_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fileDownload_result)
        return this.equals((fileDownload_result)that);
      return false;
    }

    public boolean equals(fileDownload_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(fileDownload_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileDownload_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileDownload_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileDownload_resultStandardScheme getScheme() {
        return new fileDownload_resultStandardScheme();
      }
    }

    private static class fileDownload_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileDownload_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileDownload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileDownload_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileDownload_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileDownload_resultTupleScheme getScheme() {
        return new fileDownload_resultTupleScheme();
      }
    }

    private static class fileDownload_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileDownload_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileDownload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileDownload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.FileDownloadResponseType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class captureJpeg_args implements org.apache.thrift.TBase<captureJpeg_args, captureJpeg_args._Fields>, java.io.Serializable, Cloneable, Comparable<captureJpeg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("captureJpeg_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CAPTURE_JPEG_DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("captureJpegDeviceType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("channelNumber", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CAPTURE_JPEG_PIXELS_FIELD_DESC = new org.apache.thrift.protocol.TField("captureJpegPixels", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MULTIMEDIA_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("multimediaQuality", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField SERVER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIp", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)10);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new captureJpeg_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new captureJpeg_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality; // required
    public java.lang.String serverIp; // required
    public int serverPort; // required
    public java.lang.String userName; // required
    public java.lang.String password; // required
    public java.lang.String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      /**
       * 
       * @see cn.udian.thriftservice.CaptureJpegDeviceType
       */
      CAPTURE_JPEG_DEVICE_TYPE((short)2, "captureJpegDeviceType"),
      /**
       * 
       * @see cn.udian.thriftservice.ChannelNumber
       */
      CHANNEL_NUMBER((short)3, "channelNumber"),
      /**
       * 
       * @see cn.udian.thriftservice.CaptureJpegPixels
       */
      CAPTURE_JPEG_PIXELS((short)4, "captureJpegPixels"),
      /**
       * 
       * @see cn.udian.thriftservice.MultimediaQuality
       */
      MULTIMEDIA_QUALITY((short)5, "multimediaQuality"),
      SERVER_IP((short)6, "serverIp"),
      SERVER_PORT((short)7, "serverPort"),
      USER_NAME((short)8, "userName"),
      PASSWORD((short)9, "password"),
      PATH((short)10, "path");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // CAPTURE_JPEG_DEVICE_TYPE
            return CAPTURE_JPEG_DEVICE_TYPE;
          case 3: // CHANNEL_NUMBER
            return CHANNEL_NUMBER;
          case 4: // CAPTURE_JPEG_PIXELS
            return CAPTURE_JPEG_PIXELS;
          case 5: // MULTIMEDIA_QUALITY
            return MULTIMEDIA_QUALITY;
          case 6: // SERVER_IP
            return SERVER_IP;
          case 7: // SERVER_PORT
            return SERVER_PORT;
          case 8: // USER_NAME
            return USER_NAME;
          case 9: // PASSWORD
            return PASSWORD;
          case 10: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERPORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAPTURE_JPEG_DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("captureJpegDeviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType.class)));
      tmpMap.put(_Fields.CHANNEL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("channelNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber.class)));
      tmpMap.put(_Fields.CAPTURE_JPEG_PIXELS, new org.apache.thrift.meta_data.FieldMetaData("captureJpegPixels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels.class)));
      tmpMap.put(_Fields.MULTIMEDIA_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("multimediaQuality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality.class)));
      tmpMap.put(_Fields.SERVER_IP, new org.apache.thrift.meta_data.FieldMetaData("serverIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(captureJpeg_args.class, metaDataMap);
    }

    public captureJpeg_args() {
    }

    public captureJpeg_args(
      java.lang.String busId,
      cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType,
      cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber,
      cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels,
      cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality,
      java.lang.String serverIp,
      int serverPort,
      java.lang.String userName,
      java.lang.String password,
      java.lang.String path)
    {
      this();
      this.busId = busId;
      this.captureJpegDeviceType = captureJpegDeviceType;
      this.channelNumber = channelNumber;
      this.captureJpegPixels = captureJpegPixels;
      this.multimediaQuality = multimediaQuality;
      this.serverIp = serverIp;
      this.serverPort = serverPort;
      setServerPortIsSet(true);
      this.userName = userName;
      this.password = password;
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public captureJpeg_args(captureJpeg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      if (other.isSetCaptureJpegDeviceType()) {
        this.captureJpegDeviceType = other.captureJpegDeviceType;
      }
      if (other.isSetChannelNumber()) {
        this.channelNumber = other.channelNumber;
      }
      if (other.isSetCaptureJpegPixels()) {
        this.captureJpegPixels = other.captureJpegPixels;
      }
      if (other.isSetMultimediaQuality()) {
        this.multimediaQuality = other.multimediaQuality;
      }
      if (other.isSetServerIp()) {
        this.serverIp = other.serverIp;
      }
      this.serverPort = other.serverPort;
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public captureJpeg_args deepCopy() {
      return new captureJpeg_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      this.captureJpegDeviceType = null;
      this.channelNumber = null;
      this.captureJpegPixels = null;
      this.multimediaQuality = null;
      this.serverIp = null;
      setServerPortIsSet(false);
      this.serverPort = 0;
      this.userName = null;
      this.password = null;
      this.path = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public captureJpeg_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType getCaptureJpegDeviceType() {
      return this.captureJpegDeviceType;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType
     */
    public captureJpeg_args setCaptureJpegDeviceType(cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType captureJpegDeviceType) {
      this.captureJpegDeviceType = captureJpegDeviceType;
      return this;
    }

    public void unsetCaptureJpegDeviceType() {
      this.captureJpegDeviceType = null;
    }

    /** Returns true if field captureJpegDeviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetCaptureJpegDeviceType() {
      return this.captureJpegDeviceType != null;
    }

    public void setCaptureJpegDeviceTypeIsSet(boolean value) {
      if (!value) {
        this.captureJpegDeviceType = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber getChannelNumber() {
      return this.channelNumber;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber
     */
    public captureJpeg_args setChannelNumber(cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber) {
      this.channelNumber = channelNumber;
      return this;
    }

    public void unsetChannelNumber() {
      this.channelNumber = null;
    }

    /** Returns true if field channelNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelNumber() {
      return this.channelNumber != null;
    }

    public void setChannelNumberIsSet(boolean value) {
      if (!value) {
        this.channelNumber = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels getCaptureJpegPixels() {
      return this.captureJpegPixels;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels
     */
    public captureJpeg_args setCaptureJpegPixels(cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels captureJpegPixels) {
      this.captureJpegPixels = captureJpegPixels;
      return this;
    }

    public void unsetCaptureJpegPixels() {
      this.captureJpegPixels = null;
    }

    /** Returns true if field captureJpegPixels is set (has been assigned a value) and false otherwise */
    public boolean isSetCaptureJpegPixels() {
      return this.captureJpegPixels != null;
    }

    public void setCaptureJpegPixelsIsSet(boolean value) {
      if (!value) {
        this.captureJpegPixels = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality getMultimediaQuality() {
      return this.multimediaQuality;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality
     */
    public captureJpeg_args setMultimediaQuality(cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality) {
      this.multimediaQuality = multimediaQuality;
      return this;
    }

    public void unsetMultimediaQuality() {
      this.multimediaQuality = null;
    }

    /** Returns true if field multimediaQuality is set (has been assigned a value) and false otherwise */
    public boolean isSetMultimediaQuality() {
      return this.multimediaQuality != null;
    }

    public void setMultimediaQualityIsSet(boolean value) {
      if (!value) {
        this.multimediaQuality = null;
      }
    }

    public java.lang.String getServerIp() {
      return this.serverIp;
    }

    public captureJpeg_args setServerIp(java.lang.String serverIp) {
      this.serverIp = serverIp;
      return this;
    }

    public void unsetServerIp() {
      this.serverIp = null;
    }

    /** Returns true if field serverIp is set (has been assigned a value) and false otherwise */
    public boolean isSetServerIp() {
      return this.serverIp != null;
    }

    public void setServerIpIsSet(boolean value) {
      if (!value) {
        this.serverIp = null;
      }
    }

    public int getServerPort() {
      return this.serverPort;
    }

    public captureJpeg_args setServerPort(int serverPort) {
      this.serverPort = serverPort;
      setServerPortIsSet(true);
      return this;
    }

    public void unsetServerPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
    }

    /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
    public boolean isSetServerPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
    }

    public void setServerPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERPORT_ISSET_ID, value);
    }

    public java.lang.String getUserName() {
      return this.userName;
    }

    public captureJpeg_args setUserName(java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public captureJpeg_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getPath() {
      return this.path;
    }

    public captureJpeg_args setPath(java.lang.String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case CAPTURE_JPEG_DEVICE_TYPE:
        if (value == null) {
          unsetCaptureJpegDeviceType();
        } else {
          setCaptureJpegDeviceType((cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType)value);
        }
        break;

      case CHANNEL_NUMBER:
        if (value == null) {
          unsetChannelNumber();
        } else {
          setChannelNumber((cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber)value);
        }
        break;

      case CAPTURE_JPEG_PIXELS:
        if (value == null) {
          unsetCaptureJpegPixels();
        } else {
          setCaptureJpegPixels((cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels)value);
        }
        break;

      case MULTIMEDIA_QUALITY:
        if (value == null) {
          unsetMultimediaQuality();
        } else {
          setMultimediaQuality((cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality)value);
        }
        break;

      case SERVER_IP:
        if (value == null) {
          unsetServerIp();
        } else {
          setServerIp((java.lang.String)value);
        }
        break;

      case SERVER_PORT:
        if (value == null) {
          unsetServerPort();
        } else {
          setServerPort((java.lang.Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case CAPTURE_JPEG_DEVICE_TYPE:
        return getCaptureJpegDeviceType();

      case CHANNEL_NUMBER:
        return getChannelNumber();

      case CAPTURE_JPEG_PIXELS:
        return getCaptureJpegPixels();

      case MULTIMEDIA_QUALITY:
        return getMultimediaQuality();

      case SERVER_IP:
        return getServerIp();

      case SERVER_PORT:
        return getServerPort();

      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      case PATH:
        return getPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case CAPTURE_JPEG_DEVICE_TYPE:
        return isSetCaptureJpegDeviceType();
      case CHANNEL_NUMBER:
        return isSetChannelNumber();
      case CAPTURE_JPEG_PIXELS:
        return isSetCaptureJpegPixels();
      case MULTIMEDIA_QUALITY:
        return isSetMultimediaQuality();
      case SERVER_IP:
        return isSetServerIp();
      case SERVER_PORT:
        return isSetServerPort();
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      case PATH:
        return isSetPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof captureJpeg_args)
        return this.equals((captureJpeg_args)that);
      return false;
    }

    public boolean equals(captureJpeg_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_captureJpegDeviceType = true && this.isSetCaptureJpegDeviceType();
      boolean that_present_captureJpegDeviceType = true && that.isSetCaptureJpegDeviceType();
      if (this_present_captureJpegDeviceType || that_present_captureJpegDeviceType) {
        if (!(this_present_captureJpegDeviceType && that_present_captureJpegDeviceType))
          return false;
        if (!this.captureJpegDeviceType.equals(that.captureJpegDeviceType))
          return false;
      }

      boolean this_present_channelNumber = true && this.isSetChannelNumber();
      boolean that_present_channelNumber = true && that.isSetChannelNumber();
      if (this_present_channelNumber || that_present_channelNumber) {
        if (!(this_present_channelNumber && that_present_channelNumber))
          return false;
        if (!this.channelNumber.equals(that.channelNumber))
          return false;
      }

      boolean this_present_captureJpegPixels = true && this.isSetCaptureJpegPixels();
      boolean that_present_captureJpegPixels = true && that.isSetCaptureJpegPixels();
      if (this_present_captureJpegPixels || that_present_captureJpegPixels) {
        if (!(this_present_captureJpegPixels && that_present_captureJpegPixels))
          return false;
        if (!this.captureJpegPixels.equals(that.captureJpegPixels))
          return false;
      }

      boolean this_present_multimediaQuality = true && this.isSetMultimediaQuality();
      boolean that_present_multimediaQuality = true && that.isSetMultimediaQuality();
      if (this_present_multimediaQuality || that_present_multimediaQuality) {
        if (!(this_present_multimediaQuality && that_present_multimediaQuality))
          return false;
        if (!this.multimediaQuality.equals(that.multimediaQuality))
          return false;
      }

      boolean this_present_serverIp = true && this.isSetServerIp();
      boolean that_present_serverIp = true && that.isSetServerIp();
      if (this_present_serverIp || that_present_serverIp) {
        if (!(this_present_serverIp && that_present_serverIp))
          return false;
        if (!this.serverIp.equals(that.serverIp))
          return false;
      }

      boolean this_present_serverPort = true;
      boolean that_present_serverPort = true;
      if (this_present_serverPort || that_present_serverPort) {
        if (!(this_present_serverPort && that_present_serverPort))
          return false;
        if (this.serverPort != that.serverPort)
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isSetCaptureJpegDeviceType()) ? 131071 : 524287);
      if (isSetCaptureJpegDeviceType())
        hashCode = hashCode * 8191 + captureJpegDeviceType.getValue();

      hashCode = hashCode * 8191 + ((isSetChannelNumber()) ? 131071 : 524287);
      if (isSetChannelNumber())
        hashCode = hashCode * 8191 + channelNumber.getValue();

      hashCode = hashCode * 8191 + ((isSetCaptureJpegPixels()) ? 131071 : 524287);
      if (isSetCaptureJpegPixels())
        hashCode = hashCode * 8191 + captureJpegPixels.getValue();

      hashCode = hashCode * 8191 + ((isSetMultimediaQuality()) ? 131071 : 524287);
      if (isSetMultimediaQuality())
        hashCode = hashCode * 8191 + multimediaQuality.getValue();

      hashCode = hashCode * 8191 + ((isSetServerIp()) ? 131071 : 524287);
      if (isSetServerIp())
        hashCode = hashCode * 8191 + serverIp.hashCode();

      hashCode = hashCode * 8191 + serverPort;

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + path.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(captureJpeg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCaptureJpegDeviceType()).compareTo(other.isSetCaptureJpegDeviceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaptureJpegDeviceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captureJpegDeviceType, other.captureJpegDeviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChannelNumber()).compareTo(other.isSetChannelNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelNumber, other.channelNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCaptureJpegPixels()).compareTo(other.isSetCaptureJpegPixels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaptureJpegPixels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captureJpegPixels, other.captureJpegPixels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMultimediaQuality()).compareTo(other.isSetMultimediaQuality());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMultimediaQuality()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multimediaQuality, other.multimediaQuality);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServerIp()).compareTo(other.isSetServerIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIp, other.serverIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServerPort()).compareTo(other.isSetServerPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, other.serverPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("captureJpeg_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("captureJpegDeviceType:");
      if (this.captureJpegDeviceType == null) {
        sb.append("null");
      } else {
        sb.append(this.captureJpegDeviceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelNumber:");
      if (this.channelNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.channelNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("captureJpegPixels:");
      if (this.captureJpegPixels == null) {
        sb.append("null");
      } else {
        sb.append(this.captureJpegPixels);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("multimediaQuality:");
      if (this.multimediaQuality == null) {
        sb.append("null");
      } else {
        sb.append(this.multimediaQuality);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverIp:");
      if (this.serverIp == null) {
        sb.append("null");
      } else {
        sb.append(this.serverIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverPort:");
      sb.append(this.serverPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class captureJpeg_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureJpeg_argsStandardScheme getScheme() {
        return new captureJpeg_argsStandardScheme();
      }
    }

    private static class captureJpeg_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<captureJpeg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, captureJpeg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CAPTURE_JPEG_DEVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.captureJpegDeviceType = cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType.findByValue(iprot.readI32());
                struct.setCaptureJpegDeviceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelNumber = cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber.findByValue(iprot.readI32());
                struct.setChannelNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CAPTURE_JPEG_PIXELS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.captureJpegPixels = cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels.findByValue(iprot.readI32());
                struct.setCaptureJpegPixelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MULTIMEDIA_QUALITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.multimediaQuality = cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality.findByValue(iprot.readI32());
                struct.setMultimediaQualityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SERVER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverIp = iprot.readString();
                struct.setServerIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SERVER_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverPort = iprot.readI32();
                struct.setServerPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, captureJpeg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        if (struct.captureJpegDeviceType != null) {
          oprot.writeFieldBegin(CAPTURE_JPEG_DEVICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.captureJpegDeviceType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.channelNumber != null) {
          oprot.writeFieldBegin(CHANNEL_NUMBER_FIELD_DESC);
          oprot.writeI32(struct.channelNumber.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.captureJpegPixels != null) {
          oprot.writeFieldBegin(CAPTURE_JPEG_PIXELS_FIELD_DESC);
          oprot.writeI32(struct.captureJpegPixels.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.multimediaQuality != null) {
          oprot.writeFieldBegin(MULTIMEDIA_QUALITY_FIELD_DESC);
          oprot.writeI32(struct.multimediaQuality.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.serverIp != null) {
          oprot.writeFieldBegin(SERVER_IP_FIELD_DESC);
          oprot.writeString(struct.serverIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
        oprot.writeI32(struct.serverPort);
        oprot.writeFieldEnd();
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class captureJpeg_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureJpeg_argsTupleScheme getScheme() {
        return new captureJpeg_argsTupleScheme();
      }
    }

    private static class captureJpeg_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<captureJpeg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, captureJpeg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetCaptureJpegDeviceType()) {
          optionals.set(1);
        }
        if (struct.isSetChannelNumber()) {
          optionals.set(2);
        }
        if (struct.isSetCaptureJpegPixels()) {
          optionals.set(3);
        }
        if (struct.isSetMultimediaQuality()) {
          optionals.set(4);
        }
        if (struct.isSetServerIp()) {
          optionals.set(5);
        }
        if (struct.isSetServerPort()) {
          optionals.set(6);
        }
        if (struct.isSetUserName()) {
          optionals.set(7);
        }
        if (struct.isSetPassword()) {
          optionals.set(8);
        }
        if (struct.isSetPath()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetCaptureJpegDeviceType()) {
          oprot.writeI32(struct.captureJpegDeviceType.getValue());
        }
        if (struct.isSetChannelNumber()) {
          oprot.writeI32(struct.channelNumber.getValue());
        }
        if (struct.isSetCaptureJpegPixels()) {
          oprot.writeI32(struct.captureJpegPixels.getValue());
        }
        if (struct.isSetMultimediaQuality()) {
          oprot.writeI32(struct.multimediaQuality.getValue());
        }
        if (struct.isSetServerIp()) {
          oprot.writeString(struct.serverIp);
        }
        if (struct.isSetServerPort()) {
          oprot.writeI32(struct.serverPort);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, captureJpeg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.captureJpegDeviceType = cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegDeviceType.findByValue(iprot.readI32());
          struct.setCaptureJpegDeviceTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelNumber = cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber.findByValue(iprot.readI32());
          struct.setChannelNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.captureJpegPixels = cn.udian.communicationprotocol.szstandard.thriftservice.CaptureJpegPixels.findByValue(iprot.readI32());
          struct.setCaptureJpegPixelsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.multimediaQuality = cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality.findByValue(iprot.readI32());
          struct.setMultimediaQualityIsSet(true);
        }
        if (incoming.get(5)) {
          struct.serverIp = iprot.readString();
          struct.setServerIpIsSet(true);
        }
        if (incoming.get(6)) {
          struct.serverPort = iprot.readI32();
          struct.setServerPortIsSet(true);
        }
        if (incoming.get(7)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(8)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(9)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class captureJpeg_result implements org.apache.thrift.TBase<captureJpeg_result, captureJpeg_result._Fields>, java.io.Serializable, Cloneable, Comparable<captureJpeg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("captureJpeg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new captureJpeg_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new captureJpeg_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(captureJpeg_result.class, metaDataMap);
    }

    public captureJpeg_result() {
    }

    public captureJpeg_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public captureJpeg_result(captureJpeg_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public captureJpeg_result deepCopy() {
      return new captureJpeg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public captureJpeg_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof captureJpeg_result)
        return this.equals((captureJpeg_result)that);
      return false;
    }

    public boolean equals(captureJpeg_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(captureJpeg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("captureJpeg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class captureJpeg_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureJpeg_resultStandardScheme getScheme() {
        return new captureJpeg_resultStandardScheme();
      }
    }

    private static class captureJpeg_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<captureJpeg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, captureJpeg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, captureJpeg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class captureJpeg_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureJpeg_resultTupleScheme getScheme() {
        return new captureJpeg_resultTupleScheme();
      }
    }

    private static class captureJpeg_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<captureJpeg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, captureJpeg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, captureJpeg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class videoUpload_args implements org.apache.thrift.TBase<videoUpload_args, videoUpload_args._Fields>, java.io.Serializable, Cloneable, Comparable<videoUpload_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("videoUpload_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_START_FIELD_DESC = new org.apache.thrift.protocol.TField("isStart", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("channelNumber", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VIDEO_PIXELS_FIELD_DESC = new org.apache.thrift.protocol.TField("videoPixels", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MULTIMEDIA_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("multimediaQuality", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField AUTO_UPLOAD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("autoUploadTime", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField SERVER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIp", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.I32, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new videoUpload_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new videoUpload_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    public boolean isStart; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality; // required
    public int autoUploadTime; // required
    public java.lang.String serverIp; // required
    public int serverPort; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      IS_START((short)2, "isStart"),
      /**
       * 
       * @see cn.udian.thriftservice.ChannelNumber
       */
      CHANNEL_NUMBER((short)3, "channelNumber"),
      /**
       * 
       * @see cn.udian.thriftservice.VideoPixels
       */
      VIDEO_PIXELS((short)4, "videoPixels"),
      /**
       * 
       * @see cn.udian.thriftservice.MultimediaQuality
       */
      MULTIMEDIA_QUALITY((short)5, "multimediaQuality"),
      AUTO_UPLOAD_TIME((short)6, "autoUploadTime"),
      SERVER_IP((short)7, "serverIp"),
      SERVER_PORT((short)8, "serverPort");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // IS_START
            return IS_START;
          case 3: // CHANNEL_NUMBER
            return CHANNEL_NUMBER;
          case 4: // VIDEO_PIXELS
            return VIDEO_PIXELS;
          case 5: // MULTIMEDIA_QUALITY
            return MULTIMEDIA_QUALITY;
          case 6: // AUTO_UPLOAD_TIME
            return AUTO_UPLOAD_TIME;
          case 7: // SERVER_IP
            return SERVER_IP;
          case 8: // SERVER_PORT
            return SERVER_PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISSTART_ISSET_ID = 0;
    private static final int __AUTOUPLOADTIME_ISSET_ID = 1;
    private static final int __SERVERPORT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_START, new org.apache.thrift.meta_data.FieldMetaData("isStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CHANNEL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("channelNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber.class)));
      tmpMap.put(_Fields.VIDEO_PIXELS, new org.apache.thrift.meta_data.FieldMetaData("videoPixels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels.class)));
      tmpMap.put(_Fields.MULTIMEDIA_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("multimediaQuality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality.class)));
      tmpMap.put(_Fields.AUTO_UPLOAD_TIME, new org.apache.thrift.meta_data.FieldMetaData("autoUploadTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SERVER_IP, new org.apache.thrift.meta_data.FieldMetaData("serverIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(videoUpload_args.class, metaDataMap);
    }

    public videoUpload_args() {
    }

    public videoUpload_args(
      java.lang.String busId,
      boolean isStart,
      cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber,
      cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels,
      cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality,
      int autoUploadTime,
      java.lang.String serverIp,
      int serverPort)
    {
      this();
      this.busId = busId;
      this.isStart = isStart;
      setIsStartIsSet(true);
      this.channelNumber = channelNumber;
      this.videoPixels = videoPixels;
      this.multimediaQuality = multimediaQuality;
      this.autoUploadTime = autoUploadTime;
      setAutoUploadTimeIsSet(true);
      this.serverIp = serverIp;
      this.serverPort = serverPort;
      setServerPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public videoUpload_args(videoUpload_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      this.isStart = other.isStart;
      if (other.isSetChannelNumber()) {
        this.channelNumber = other.channelNumber;
      }
      if (other.isSetVideoPixels()) {
        this.videoPixels = other.videoPixels;
      }
      if (other.isSetMultimediaQuality()) {
        this.multimediaQuality = other.multimediaQuality;
      }
      this.autoUploadTime = other.autoUploadTime;
      if (other.isSetServerIp()) {
        this.serverIp = other.serverIp;
      }
      this.serverPort = other.serverPort;
    }

    public videoUpload_args deepCopy() {
      return new videoUpload_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      setIsStartIsSet(false);
      this.isStart = false;
      this.channelNumber = null;
      this.videoPixels = null;
      this.multimediaQuality = null;
      setAutoUploadTimeIsSet(false);
      this.autoUploadTime = 0;
      this.serverIp = null;
      setServerPortIsSet(false);
      this.serverPort = 0;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public videoUpload_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    public boolean isIsStart() {
      return this.isStart;
    }

    public videoUpload_args setIsStart(boolean isStart) {
      this.isStart = isStart;
      setIsStartIsSet(true);
      return this;
    }

    public void unsetIsStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTART_ISSET_ID);
    }

    /** Returns true if field isStart is set (has been assigned a value) and false otherwise */
    public boolean isSetIsStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTART_ISSET_ID);
    }

    public void setIsStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTART_ISSET_ID, value);
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber getChannelNumber() {
      return this.channelNumber;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber
     */
    public videoUpload_args setChannelNumber(cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber channelNumber) {
      this.channelNumber = channelNumber;
      return this;
    }

    public void unsetChannelNumber() {
      this.channelNumber = null;
    }

    /** Returns true if field channelNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelNumber() {
      return this.channelNumber != null;
    }

    public void setChannelNumberIsSet(boolean value) {
      if (!value) {
        this.channelNumber = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels getVideoPixels() {
      return this.videoPixels;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels
     */
    public videoUpload_args setVideoPixels(cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels videoPixels) {
      this.videoPixels = videoPixels;
      return this;
    }

    public void unsetVideoPixels() {
      this.videoPixels = null;
    }

    /** Returns true if field videoPixels is set (has been assigned a value) and false otherwise */
    public boolean isSetVideoPixels() {
      return this.videoPixels != null;
    }

    public void setVideoPixelsIsSet(boolean value) {
      if (!value) {
        this.videoPixels = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality getMultimediaQuality() {
      return this.multimediaQuality;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality
     */
    public videoUpload_args setMultimediaQuality(cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality multimediaQuality) {
      this.multimediaQuality = multimediaQuality;
      return this;
    }

    public void unsetMultimediaQuality() {
      this.multimediaQuality = null;
    }

    /** Returns true if field multimediaQuality is set (has been assigned a value) and false otherwise */
    public boolean isSetMultimediaQuality() {
      return this.multimediaQuality != null;
    }

    public void setMultimediaQualityIsSet(boolean value) {
      if (!value) {
        this.multimediaQuality = null;
      }
    }

    public int getAutoUploadTime() {
      return this.autoUploadTime;
    }

    public videoUpload_args setAutoUploadTime(int autoUploadTime) {
      this.autoUploadTime = autoUploadTime;
      setAutoUploadTimeIsSet(true);
      return this;
    }

    public void unsetAutoUploadTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOUPLOADTIME_ISSET_ID);
    }

    /** Returns true if field autoUploadTime is set (has been assigned a value) and false otherwise */
    public boolean isSetAutoUploadTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOUPLOADTIME_ISSET_ID);
    }

    public void setAutoUploadTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOUPLOADTIME_ISSET_ID, value);
    }

    public java.lang.String getServerIp() {
      return this.serverIp;
    }

    public videoUpload_args setServerIp(java.lang.String serverIp) {
      this.serverIp = serverIp;
      return this;
    }

    public void unsetServerIp() {
      this.serverIp = null;
    }

    /** Returns true if field serverIp is set (has been assigned a value) and false otherwise */
    public boolean isSetServerIp() {
      return this.serverIp != null;
    }

    public void setServerIpIsSet(boolean value) {
      if (!value) {
        this.serverIp = null;
      }
    }

    public int getServerPort() {
      return this.serverPort;
    }

    public videoUpload_args setServerPort(int serverPort) {
      this.serverPort = serverPort;
      setServerPortIsSet(true);
      return this;
    }

    public void unsetServerPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
    }

    /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
    public boolean isSetServerPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
    }

    public void setServerPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERPORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case IS_START:
        if (value == null) {
          unsetIsStart();
        } else {
          setIsStart((java.lang.Boolean)value);
        }
        break;

      case CHANNEL_NUMBER:
        if (value == null) {
          unsetChannelNumber();
        } else {
          setChannelNumber((cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber)value);
        }
        break;

      case VIDEO_PIXELS:
        if (value == null) {
          unsetVideoPixels();
        } else {
          setVideoPixels((cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels)value);
        }
        break;

      case MULTIMEDIA_QUALITY:
        if (value == null) {
          unsetMultimediaQuality();
        } else {
          setMultimediaQuality((cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality)value);
        }
        break;

      case AUTO_UPLOAD_TIME:
        if (value == null) {
          unsetAutoUploadTime();
        } else {
          setAutoUploadTime((java.lang.Integer)value);
        }
        break;

      case SERVER_IP:
        if (value == null) {
          unsetServerIp();
        } else {
          setServerIp((java.lang.String)value);
        }
        break;

      case SERVER_PORT:
        if (value == null) {
          unsetServerPort();
        } else {
          setServerPort((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case IS_START:
        return isIsStart();

      case CHANNEL_NUMBER:
        return getChannelNumber();

      case VIDEO_PIXELS:
        return getVideoPixels();

      case MULTIMEDIA_QUALITY:
        return getMultimediaQuality();

      case AUTO_UPLOAD_TIME:
        return getAutoUploadTime();

      case SERVER_IP:
        return getServerIp();

      case SERVER_PORT:
        return getServerPort();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case IS_START:
        return isSetIsStart();
      case CHANNEL_NUMBER:
        return isSetChannelNumber();
      case VIDEO_PIXELS:
        return isSetVideoPixels();
      case MULTIMEDIA_QUALITY:
        return isSetMultimediaQuality();
      case AUTO_UPLOAD_TIME:
        return isSetAutoUploadTime();
      case SERVER_IP:
        return isSetServerIp();
      case SERVER_PORT:
        return isSetServerPort();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof videoUpload_args)
        return this.equals((videoUpload_args)that);
      return false;
    }

    public boolean equals(videoUpload_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_isStart = true;
      boolean that_present_isStart = true;
      if (this_present_isStart || that_present_isStart) {
        if (!(this_present_isStart && that_present_isStart))
          return false;
        if (this.isStart != that.isStart)
          return false;
      }

      boolean this_present_channelNumber = true && this.isSetChannelNumber();
      boolean that_present_channelNumber = true && that.isSetChannelNumber();
      if (this_present_channelNumber || that_present_channelNumber) {
        if (!(this_present_channelNumber && that_present_channelNumber))
          return false;
        if (!this.channelNumber.equals(that.channelNumber))
          return false;
      }

      boolean this_present_videoPixels = true && this.isSetVideoPixels();
      boolean that_present_videoPixels = true && that.isSetVideoPixels();
      if (this_present_videoPixels || that_present_videoPixels) {
        if (!(this_present_videoPixels && that_present_videoPixels))
          return false;
        if (!this.videoPixels.equals(that.videoPixels))
          return false;
      }

      boolean this_present_multimediaQuality = true && this.isSetMultimediaQuality();
      boolean that_present_multimediaQuality = true && that.isSetMultimediaQuality();
      if (this_present_multimediaQuality || that_present_multimediaQuality) {
        if (!(this_present_multimediaQuality && that_present_multimediaQuality))
          return false;
        if (!this.multimediaQuality.equals(that.multimediaQuality))
          return false;
      }

      boolean this_present_autoUploadTime = true;
      boolean that_present_autoUploadTime = true;
      if (this_present_autoUploadTime || that_present_autoUploadTime) {
        if (!(this_present_autoUploadTime && that_present_autoUploadTime))
          return false;
        if (this.autoUploadTime != that.autoUploadTime)
          return false;
      }

      boolean this_present_serverIp = true && this.isSetServerIp();
      boolean that_present_serverIp = true && that.isSetServerIp();
      if (this_present_serverIp || that_present_serverIp) {
        if (!(this_present_serverIp && that_present_serverIp))
          return false;
        if (!this.serverIp.equals(that.serverIp))
          return false;
      }

      boolean this_present_serverPort = true;
      boolean that_present_serverPort = true;
      if (this_present_serverPort || that_present_serverPort) {
        if (!(this_present_serverPort && that_present_serverPort))
          return false;
        if (this.serverPort != that.serverPort)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isStart) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetChannelNumber()) ? 131071 : 524287);
      if (isSetChannelNumber())
        hashCode = hashCode * 8191 + channelNumber.getValue();

      hashCode = hashCode * 8191 + ((isSetVideoPixels()) ? 131071 : 524287);
      if (isSetVideoPixels())
        hashCode = hashCode * 8191 + videoPixels.getValue();

      hashCode = hashCode * 8191 + ((isSetMultimediaQuality()) ? 131071 : 524287);
      if (isSetMultimediaQuality())
        hashCode = hashCode * 8191 + multimediaQuality.getValue();

      hashCode = hashCode * 8191 + autoUploadTime;

      hashCode = hashCode * 8191 + ((isSetServerIp()) ? 131071 : 524287);
      if (isSetServerIp())
        hashCode = hashCode * 8191 + serverIp.hashCode();

      hashCode = hashCode * 8191 + serverPort;

      return hashCode;
    }

    @Override
    public int compareTo(videoUpload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIsStart()).compareTo(other.isSetIsStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStart, other.isStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChannelNumber()).compareTo(other.isSetChannelNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelNumber, other.channelNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVideoPixels()).compareTo(other.isSetVideoPixels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVideoPixels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoPixels, other.videoPixels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMultimediaQuality()).compareTo(other.isSetMultimediaQuality());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMultimediaQuality()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multimediaQuality, other.multimediaQuality);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAutoUploadTime()).compareTo(other.isSetAutoUploadTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAutoUploadTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoUploadTime, other.autoUploadTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServerIp()).compareTo(other.isSetServerIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIp, other.serverIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServerPort()).compareTo(other.isSetServerPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, other.serverPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("videoUpload_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isStart:");
      sb.append(this.isStart);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelNumber:");
      if (this.channelNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.channelNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("videoPixels:");
      if (this.videoPixels == null) {
        sb.append("null");
      } else {
        sb.append(this.videoPixels);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("multimediaQuality:");
      if (this.multimediaQuality == null) {
        sb.append("null");
      } else {
        sb.append(this.multimediaQuality);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("autoUploadTime:");
      sb.append(this.autoUploadTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverIp:");
      if (this.serverIp == null) {
        sb.append("null");
      } else {
        sb.append(this.serverIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverPort:");
      sb.append(this.serverPort);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class videoUpload_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public videoUpload_argsStandardScheme getScheme() {
        return new videoUpload_argsStandardScheme();
      }
    }

    private static class videoUpload_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<videoUpload_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, videoUpload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_START
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isStart = iprot.readBool();
                struct.setIsStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelNumber = cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber.findByValue(iprot.readI32());
                struct.setChannelNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VIDEO_PIXELS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.videoPixels = cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels.findByValue(iprot.readI32());
                struct.setVideoPixelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MULTIMEDIA_QUALITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.multimediaQuality = cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality.findByValue(iprot.readI32());
                struct.setMultimediaQualityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AUTO_UPLOAD_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.autoUploadTime = iprot.readI32();
                struct.setAutoUploadTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SERVER_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverIp = iprot.readString();
                struct.setServerIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // SERVER_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverPort = iprot.readI32();
                struct.setServerPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, videoUpload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_START_FIELD_DESC);
        oprot.writeBool(struct.isStart);
        oprot.writeFieldEnd();
        if (struct.channelNumber != null) {
          oprot.writeFieldBegin(CHANNEL_NUMBER_FIELD_DESC);
          oprot.writeI32(struct.channelNumber.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.videoPixels != null) {
          oprot.writeFieldBegin(VIDEO_PIXELS_FIELD_DESC);
          oprot.writeI32(struct.videoPixels.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.multimediaQuality != null) {
          oprot.writeFieldBegin(MULTIMEDIA_QUALITY_FIELD_DESC);
          oprot.writeI32(struct.multimediaQuality.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AUTO_UPLOAD_TIME_FIELD_DESC);
        oprot.writeI32(struct.autoUploadTime);
        oprot.writeFieldEnd();
        if (struct.serverIp != null) {
          oprot.writeFieldBegin(SERVER_IP_FIELD_DESC);
          oprot.writeString(struct.serverIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
        oprot.writeI32(struct.serverPort);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class videoUpload_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public videoUpload_argsTupleScheme getScheme() {
        return new videoUpload_argsTupleScheme();
      }
    }

    private static class videoUpload_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<videoUpload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, videoUpload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetIsStart()) {
          optionals.set(1);
        }
        if (struct.isSetChannelNumber()) {
          optionals.set(2);
        }
        if (struct.isSetVideoPixels()) {
          optionals.set(3);
        }
        if (struct.isSetMultimediaQuality()) {
          optionals.set(4);
        }
        if (struct.isSetAutoUploadTime()) {
          optionals.set(5);
        }
        if (struct.isSetServerIp()) {
          optionals.set(6);
        }
        if (struct.isSetServerPort()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetIsStart()) {
          oprot.writeBool(struct.isStart);
        }
        if (struct.isSetChannelNumber()) {
          oprot.writeI32(struct.channelNumber.getValue());
        }
        if (struct.isSetVideoPixels()) {
          oprot.writeI32(struct.videoPixels.getValue());
        }
        if (struct.isSetMultimediaQuality()) {
          oprot.writeI32(struct.multimediaQuality.getValue());
        }
        if (struct.isSetAutoUploadTime()) {
          oprot.writeI32(struct.autoUploadTime);
        }
        if (struct.isSetServerIp()) {
          oprot.writeString(struct.serverIp);
        }
        if (struct.isSetServerPort()) {
          oprot.writeI32(struct.serverPort);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, videoUpload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isStart = iprot.readBool();
          struct.setIsStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelNumber = cn.udian.communicationprotocol.szstandard.thriftservice.ChannelNumber.findByValue(iprot.readI32());
          struct.setChannelNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.videoPixels = cn.udian.communicationprotocol.szstandard.thriftservice.VideoPixels.findByValue(iprot.readI32());
          struct.setVideoPixelsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.multimediaQuality = cn.udian.communicationprotocol.szstandard.thriftservice.MultimediaQuality.findByValue(iprot.readI32());
          struct.setMultimediaQualityIsSet(true);
        }
        if (incoming.get(5)) {
          struct.autoUploadTime = iprot.readI32();
          struct.setAutoUploadTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.serverIp = iprot.readString();
          struct.setServerIpIsSet(true);
        }
        if (incoming.get(7)) {
          struct.serverPort = iprot.readI32();
          struct.setServerPortIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class videoUpload_result implements org.apache.thrift.TBase<videoUpload_result, videoUpload_result._Fields>, java.io.Serializable, Cloneable, Comparable<videoUpload_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("videoUpload_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new videoUpload_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new videoUpload_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(videoUpload_result.class, metaDataMap);
    }

    public videoUpload_result() {
    }

    public videoUpload_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public videoUpload_result(videoUpload_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public videoUpload_result deepCopy() {
      return new videoUpload_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public videoUpload_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof videoUpload_result)
        return this.equals((videoUpload_result)that);
      return false;
    }

    public boolean equals(videoUpload_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(videoUpload_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("videoUpload_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class videoUpload_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public videoUpload_resultStandardScheme getScheme() {
        return new videoUpload_resultStandardScheme();
      }
    }

    private static class videoUpload_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<videoUpload_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, videoUpload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, videoUpload_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class videoUpload_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public videoUpload_resultTupleScheme getScheme() {
        return new videoUpload_resultTupleScheme();
      }
    }

    private static class videoUpload_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<videoUpload_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, videoUpload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, videoUpload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalTimingAndDistance_args implements org.apache.thrift.TBase<setTerminalTimingAndDistance_args, setTerminalTimingAndDistance_args._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalTimingAndDistance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalTimingAndDistance_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("inerval", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalTimingAndDistance_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalTimingAndDistance_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    public int inerval; // required
    public double distance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      INERVAL((short)2, "inerval"),
      DISTANCE((short)3, "distance");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // INERVAL
            return INERVAL;
          case 3: // DISTANCE
            return DISTANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INERVAL_ISSET_ID = 0;
    private static final int __DISTANCE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INERVAL, new org.apache.thrift.meta_data.FieldMetaData("inerval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalTimingAndDistance_args.class, metaDataMap);
    }

    public setTerminalTimingAndDistance_args() {
    }

    public setTerminalTimingAndDistance_args(
      java.lang.String busId,
      int inerval,
      double distance)
    {
      this();
      this.busId = busId;
      this.inerval = inerval;
      setInervalIsSet(true);
      this.distance = distance;
      setDistanceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalTimingAndDistance_args(setTerminalTimingAndDistance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      this.inerval = other.inerval;
      this.distance = other.distance;
    }

    public setTerminalTimingAndDistance_args deepCopy() {
      return new setTerminalTimingAndDistance_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      setInervalIsSet(false);
      this.inerval = 0;
      setDistanceIsSet(false);
      this.distance = 0.0;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public setTerminalTimingAndDistance_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    public int getInerval() {
      return this.inerval;
    }

    public setTerminalTimingAndDistance_args setInerval(int inerval) {
      this.inerval = inerval;
      setInervalIsSet(true);
      return this;
    }

    public void unsetInerval() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INERVAL_ISSET_ID);
    }

    /** Returns true if field inerval is set (has been assigned a value) and false otherwise */
    public boolean isSetInerval() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INERVAL_ISSET_ID);
    }

    public void setInervalIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INERVAL_ISSET_ID, value);
    }

    public double getDistance() {
      return this.distance;
    }

    public setTerminalTimingAndDistance_args setDistance(double distance) {
      this.distance = distance;
      setDistanceIsSet(true);
      return this;
    }

    public void unsetDistance() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
    }

    /** Returns true if field distance is set (has been assigned a value) and false otherwise */
    public boolean isSetDistance() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
    }

    public void setDistanceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case INERVAL:
        if (value == null) {
          unsetInerval();
        } else {
          setInerval((java.lang.Integer)value);
        }
        break;

      case DISTANCE:
        if (value == null) {
          unsetDistance();
        } else {
          setDistance((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case INERVAL:
        return getInerval();

      case DISTANCE:
        return getDistance();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case INERVAL:
        return isSetInerval();
      case DISTANCE:
        return isSetDistance();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalTimingAndDistance_args)
        return this.equals((setTerminalTimingAndDistance_args)that);
      return false;
    }

    public boolean equals(setTerminalTimingAndDistance_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_inerval = true;
      boolean that_present_inerval = true;
      if (this_present_inerval || that_present_inerval) {
        if (!(this_present_inerval && that_present_inerval))
          return false;
        if (this.inerval != that.inerval)
          return false;
      }

      boolean this_present_distance = true;
      boolean that_present_distance = true;
      if (this_present_distance || that_present_distance) {
        if (!(this_present_distance && that_present_distance))
          return false;
        if (this.distance != that.distance)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + inerval;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(distance);

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalTimingAndDistance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInerval()).compareTo(other.isSetInerval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInerval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inerval, other.inerval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDistance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalTimingAndDistance_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inerval:");
      sb.append(this.inerval);
      first = false;
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalTimingAndDistance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalTimingAndDistance_argsStandardScheme getScheme() {
        return new setTerminalTimingAndDistance_argsStandardScheme();
      }
    }

    private static class setTerminalTimingAndDistance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalTimingAndDistance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalTimingAndDistance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INERVAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.inerval = iprot.readI32();
                struct.setInervalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DISTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.distance = iprot.readDouble();
                struct.setDistanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalTimingAndDistance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INERVAL_FIELD_DESC);
        oprot.writeI32(struct.inerval);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeDouble(struct.distance);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalTimingAndDistance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalTimingAndDistance_argsTupleScheme getScheme() {
        return new setTerminalTimingAndDistance_argsTupleScheme();
      }
    }

    private static class setTerminalTimingAndDistance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalTimingAndDistance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalTimingAndDistance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetInerval()) {
          optionals.set(1);
        }
        if (struct.isSetDistance()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetInerval()) {
          oprot.writeI32(struct.inerval);
        }
        if (struct.isSetDistance()) {
          oprot.writeDouble(struct.distance);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalTimingAndDistance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inerval = iprot.readI32();
          struct.setInervalIsSet(true);
        }
        if (incoming.get(2)) {
          struct.distance = iprot.readDouble();
          struct.setDistanceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalTimingAndDistance_result implements org.apache.thrift.TBase<setTerminalTimingAndDistance_result, setTerminalTimingAndDistance_result._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalTimingAndDistance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalTimingAndDistance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalTimingAndDistance_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalTimingAndDistance_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalTimingAndDistance_result.class, metaDataMap);
    }

    public setTerminalTimingAndDistance_result() {
    }

    public setTerminalTimingAndDistance_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalTimingAndDistance_result(setTerminalTimingAndDistance_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setTerminalTimingAndDistance_result deepCopy() {
      return new setTerminalTimingAndDistance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public setTerminalTimingAndDistance_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalTimingAndDistance_result)
        return this.equals((setTerminalTimingAndDistance_result)that);
      return false;
    }

    public boolean equals(setTerminalTimingAndDistance_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalTimingAndDistance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalTimingAndDistance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalTimingAndDistance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalTimingAndDistance_resultStandardScheme getScheme() {
        return new setTerminalTimingAndDistance_resultStandardScheme();
      }
    }

    private static class setTerminalTimingAndDistance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalTimingAndDistance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalTimingAndDistance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalTimingAndDistance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalTimingAndDistance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalTimingAndDistance_resultTupleScheme getScheme() {
        return new setTerminalTimingAndDistance_resultTupleScheme();
      }
    }

    private static class setTerminalTimingAndDistance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalTimingAndDistance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalTimingAndDistance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalTimingAndDistance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalNotificationStyle_args implements org.apache.thrift.TBase<setTerminalNotificationStyle_args, setTerminalNotificationStyle_args._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalNotificationStyle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalNotificationStyle_args");

    private static final org.apache.thrift.protocol.TField BUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("busId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("style", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalNotificationStyle_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalNotificationStyle_argsTupleSchemeFactory();

    public java.lang.String busId; // required
    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUS_ID((short)1, "busId"),
      /**
       * 
       * @see cn.udian.thriftservice.NotificationStyle
       */
      STYLE((short)2, "style");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUS_ID
            return BUS_ID;
          case 2: // STYLE
            return STYLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUS_ID, new org.apache.thrift.meta_data.FieldMetaData("busId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STYLE, new org.apache.thrift.meta_data.FieldMetaData("style", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalNotificationStyle_args.class, metaDataMap);
    }

    public setTerminalNotificationStyle_args() {
    }

    public setTerminalNotificationStyle_args(
      java.lang.String busId,
      cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style)
    {
      this();
      this.busId = busId;
      this.style = style;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalNotificationStyle_args(setTerminalNotificationStyle_args other) {
      if (other.isSetBusId()) {
        this.busId = other.busId;
      }
      if (other.isSetStyle()) {
        this.style = other.style;
      }
    }

    public setTerminalNotificationStyle_args deepCopy() {
      return new setTerminalNotificationStyle_args(this);
    }

    @Override
    public void clear() {
      this.busId = null;
      this.style = null;
    }

    public java.lang.String getBusId() {
      return this.busId;
    }

    public setTerminalNotificationStyle_args setBusId(java.lang.String busId) {
      this.busId = busId;
      return this;
    }

    public void unsetBusId() {
      this.busId = null;
    }

    /** Returns true if field busId is set (has been assigned a value) and false otherwise */
    public boolean isSetBusId() {
      return this.busId != null;
    }

    public void setBusIdIsSet(boolean value) {
      if (!value) {
        this.busId = null;
      }
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle getStyle() {
      return this.style;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle
     */
    public setTerminalNotificationStyle_args setStyle(cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle style) {
      this.style = style;
      return this;
    }

    public void unsetStyle() {
      this.style = null;
    }

    /** Returns true if field style is set (has been assigned a value) and false otherwise */
    public boolean isSetStyle() {
      return this.style != null;
    }

    public void setStyleIsSet(boolean value) {
      if (!value) {
        this.style = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUS_ID:
        if (value == null) {
          unsetBusId();
        } else {
          setBusId((java.lang.String)value);
        }
        break;

      case STYLE:
        if (value == null) {
          unsetStyle();
        } else {
          setStyle((cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUS_ID:
        return getBusId();

      case STYLE:
        return getStyle();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUS_ID:
        return isSetBusId();
      case STYLE:
        return isSetStyle();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalNotificationStyle_args)
        return this.equals((setTerminalNotificationStyle_args)that);
      return false;
    }

    public boolean equals(setTerminalNotificationStyle_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_busId = true && this.isSetBusId();
      boolean that_present_busId = true && that.isSetBusId();
      if (this_present_busId || that_present_busId) {
        if (!(this_present_busId && that_present_busId))
          return false;
        if (!this.busId.equals(that.busId))
          return false;
      }

      boolean this_present_style = true && this.isSetStyle();
      boolean that_present_style = true && that.isSetStyle();
      if (this_present_style || that_present_style) {
        if (!(this_present_style && that_present_style))
          return false;
        if (!this.style.equals(that.style))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusId()) ? 131071 : 524287);
      if (isSetBusId())
        hashCode = hashCode * 8191 + busId.hashCode();

      hashCode = hashCode * 8191 + ((isSetStyle()) ? 131071 : 524287);
      if (isSetStyle())
        hashCode = hashCode * 8191 + style.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalNotificationStyle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusId()).compareTo(other.isSetBusId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busId, other.busId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStyle()).compareTo(other.isSetStyle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStyle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.style, other.style);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalNotificationStyle_args(");
      boolean first = true;

      sb.append("busId:");
      if (this.busId == null) {
        sb.append("null");
      } else {
        sb.append(this.busId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("style:");
      if (this.style == null) {
        sb.append("null");
      } else {
        sb.append(this.style);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalNotificationStyle_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalNotificationStyle_argsStandardScheme getScheme() {
        return new setTerminalNotificationStyle_argsStandardScheme();
      }
    }

    private static class setTerminalNotificationStyle_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalNotificationStyle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalNotificationStyle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.busId = iprot.readString();
                struct.setBusIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STYLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.style = cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle.findByValue(iprot.readI32());
                struct.setStyleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalNotificationStyle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.busId != null) {
          oprot.writeFieldBegin(BUS_ID_FIELD_DESC);
          oprot.writeString(struct.busId);
          oprot.writeFieldEnd();
        }
        if (struct.style != null) {
          oprot.writeFieldBegin(STYLE_FIELD_DESC);
          oprot.writeI32(struct.style.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalNotificationStyle_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalNotificationStyle_argsTupleScheme getScheme() {
        return new setTerminalNotificationStyle_argsTupleScheme();
      }
    }

    private static class setTerminalNotificationStyle_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalNotificationStyle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalNotificationStyle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusId()) {
          optionals.set(0);
        }
        if (struct.isSetStyle()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBusId()) {
          oprot.writeString(struct.busId);
        }
        if (struct.isSetStyle()) {
          oprot.writeI32(struct.style.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalNotificationStyle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.busId = iprot.readString();
          struct.setBusIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.style = cn.udian.communicationprotocol.szstandard.thriftservice.NotificationStyle.findByValue(iprot.readI32());
          struct.setStyleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setTerminalNotificationStyle_result implements org.apache.thrift.TBase<setTerminalNotificationStyle_result, setTerminalNotificationStyle_result._Fields>, java.io.Serializable, Cloneable, Comparable<setTerminalNotificationStyle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTerminalNotificationStyle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setTerminalNotificationStyle_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setTerminalNotificationStyle_resultTupleSchemeFactory();

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see cn.udian.thriftservice.ActionResultType
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTerminalNotificationStyle_result.class, metaDataMap);
    }

    public setTerminalNotificationStyle_result() {
    }

    public setTerminalNotificationStyle_result(
      cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTerminalNotificationStyle_result(setTerminalNotificationStyle_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setTerminalNotificationStyle_result deepCopy() {
      return new setTerminalNotificationStyle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType
     */
    public setTerminalNotificationStyle_result setSuccess(cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setTerminalNotificationStyle_result)
        return this.equals((setTerminalNotificationStyle_result)that);
      return false;
    }

    public boolean equals(setTerminalNotificationStyle_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(setTerminalNotificationStyle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setTerminalNotificationStyle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTerminalNotificationStyle_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalNotificationStyle_resultStandardScheme getScheme() {
        return new setTerminalNotificationStyle_resultStandardScheme();
      }
    }

    private static class setTerminalNotificationStyle_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setTerminalNotificationStyle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTerminalNotificationStyle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTerminalNotificationStyle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTerminalNotificationStyle_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setTerminalNotificationStyle_resultTupleScheme getScheme() {
        return new setTerminalNotificationStyle_resultTupleScheme();
      }
    }

    private static class setTerminalNotificationStyle_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setTerminalNotificationStyle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTerminalNotificationStyle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTerminalNotificationStyle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = cn.udian.communicationprotocol.szstandard.thriftservice.ActionResultType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
